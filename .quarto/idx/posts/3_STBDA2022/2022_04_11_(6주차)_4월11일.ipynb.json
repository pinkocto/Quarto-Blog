{"title":"**[STBDA]** 6wk. 회귀모형 적합 with keras","markdown":{"yaml":{"title":"**[STBDA]** 6wk. 회귀모형 적합 with keras","author":"JiyunLim","date":"05/18/2023","categories":["빅데이터분석특강"]},"headingText":"강의영상","containsRefs":false,"markdown":"\n\n\n> youtube: https://youtube.com/playlist?list=PLQqh36zP38-zueMdNhXiDTIMD-Dz5sbBD\n\n### imports \n\n### $x \\to \\hat{y}$ 가 되는 과정을 그림으로 그리기\n\n`-` 단순회귀분석의 예시\n- $\\hat{y}_i = \\hat{\\beta}_0 + \\hat{\\beta}_1 x_i, \\quad i=1,2,\\dots,n$\n\n(표현1)\n\n`-` 표현1의 소감? \n- 교수님이 고생해서 만든것 같음 \n- 그런데 그냥 다 똑같은 그림의 반복이라 사실 고생한 의미가 없음. \n\n(표현2)\n\n`-` 그냥 아래와 같이 그리고 \"모든 $i=1,2,3,\\dots,n$에 대하여 $\\hat{y}_i$을 아래의 그림과 같이 그린다\"고 하면 될것 같다. \n\n(표현3) \n\n`-` 그런데 \"모든 $i=1,2,3,\\dots,n$에 대하여 $\\hat{y}_i$을 아래의 그림과 같이 그린다\" 라는 언급자체도 반복할 필요가 없을 것 같다. (어차피 당연히 그럴테니까) 그래서 단순히 아래와 같이 그려도 무방할듯 하다. \n\n(표현4)\n\n`-` 위의 모델은 아래와 같이 쓸 수 있다. ($\\beta_0$를 바이어스로 표현) \n\n- 실제로는 이 표현을 많이 사용함 \n\n(표현5)\n\n`-` 벡터버전으로 표현하면 아래와 같다. 이 경우에는 ${\\bf X}=[1,x]$에 포함된 1이 bias의 역할을 해주므로 `bias = False` 임. \n\n- 저는 이걸 좋아해요 \n\n(표현5)'\n\n`-` 딥러닝에서는 $\\hat{\\boldsymbol{\\beta}}$ 대신에 $\\hat{{\\bf W}}$을 라고 표현한다. \n\n`-` 실제로는 표현4 혹은 표현5를 외우면 된다. \n\n### Layer의 개념 \n\n`-` (표현4) 혹은 (표현5)의 그림은 레이어로 설명할 수 있다. \n\n`-` 레이어는 항상 아래와 같은 규칙을 가진다. \n- 첫 동그라미는 레이어의 입력이다. \n- 첫번째 화살표는 선형변환을 의미한다. \n- 두번째 동그라미는 선형변환의 결과이다. (이때 bias가 false인지 true인지에 따라서 실제 수식이 조금 다름) \n- 두번째 화살표는 두번째 동그라미에 어떠한 함수 $f$를 취하는 과정을 의미한다. (우리의 그림에서는 $f(x)=x$) \n- 세번째 동그라미는 레이어의 최종출력이다. \n\n`-` 엄청 복잡한데, 결국 레이어를 만들때 위의 그림들을 의미하도록 하려면 아래의 4개의 요소만 필요하다. \n1. 레이어의 입력차원 \n2. 선형변환의 결과로 얻어지는 차원\n3. 선형변환에서 바이어스를 쓸지? 안쓸지? \n4. 함수 $f$\n\n`-` 주목: 1,2가 결정되면 자동으로 $\\hat{{\\bf W}}$의 차원이 결정된다. \n\n(예시)\n- 레이어의 입력차원=2, 선형변환의 결과로 얻어지는 차원=1: $\\hat{\\bf W}$는 (2,1) 매트릭스 \n- 레이어의 입력차원=20, 선형변환의 결과로 얻어지는 차원=5: $\\hat{\\bf W}$는 (20,5) 매트릭스 \n- 레이어의 입력차원=2, 선형변환의 결과로 얻어지는 차원=50: $\\hat{\\bf W}$는 (2,50) 매트릭스 \n\n\n`-` 주목2: 이중에서 절대 생략불가능 것은 **<font color='red'>\"2. 선형변환의 결과로 얻어지는 차원\"</font>**  이다. \n- 레이어의 입력차원: 실제 레이어에 데이터가 들어올 때 데이터의 입력차원을 컴퓨터 스스로 체크하여 $\\hat{\\bf W}$의 차원을 결정할 수 있음. \n- 바이어스를 쓸지? 안쓸지? 기본적으로 쓴다고 가정한다. \n- 함수 $f$: 기본적으로 항등함수를 가정하면 된다. \n\n### Keras를 이용한 풀이 \n\n`-` 기본뼈대: net생성 $\\to$ add(layer) $\\to$ compile(opt,loss) $\\to$ fit(data,epochs) \n\n`-` 데이터정리 \n\n$${\\bf y}\\approx 2.5 +4*x$$ \n\n#### 풀이1: 스칼라버전 \n\n(0단계) 데이터정리 \n\n(1단계) net 생성 \n\n(2단계) net.add(layer) \n\n(3단계) net.compile(opt,loss_fn) \n\n#### (4단계) net.fit(x,y,epochs)\n\n- `batch_size=N` : 경사하강법\n- `batch_size!=N` : 확률적 경사하강법\n\n(결과확인) \n\n- 스칼라버전 끝!\n\n#### 풀이2: 벡터버전  \n\n(0단계) 데이터정리 \n\n(1단계) net 생성 \n\n(2단계) net.add(layer) \n\n(3단계) net.compile(opt,loss_fn) \n\n(4단계) net.fit(x,y,epochs)\n\n(결과확인) \n\n::: {.callout-note}\n### 잠시문법정리 \n\n`-` 잠깐 Dense layer를 만드는 코드를 정리해보자. \n\n(1) 아래는 모두 같은 코드이다. \n- tf.keras.layers.Dense(1) \n- tf.keras.layers.Dense(units=1) \n- tf.keras.layers.Dense(units=1,activation='linear') // identity 가 더 맞는것 같은데.. \n- tf.keras.layers.Dense(units=1,activation='linear',use_bias=True) \n\n(2) 아래의 코드1,2는 (1)의 코드들과 살짝 다른코드이다. (코드1과 코드2는 같은코드임) \n- tf.keras.layers.Dense(1,input_dim=2) # 코드1\n- tf.keras.layers.Dense(1,input_shape=(2,)) # 코드2 \n\n\n(3) 아래는 사용불가능한 코드이다. \n- tf.keras.layers.Dense(1,input_dim=(2,)) # 코드1\n- tf.keras.layers.Dense(1,input_shape=2) # 코드2 \n:::\n\n`-` 왜 input_dim이 필요한가?\n\n#### 풀이3: 스칼라버전, 임의의 초기값을 설정 \n\n(0단계) 데이터정리 \n\n(1단계) net생성 \n\n(2단계) net.add(layer)\n\n- weight, bias 순으로 출력\n\n--- \n\n***초기값을 설정***\n\n- weight, bias순으로 출력 \n\n-  layer_b.set_weights(layer_a.get_weights()) 와 같은방식으로 쓴다는 것이군? \n\n`-` 한번따라해보자. \n\n- 길이가 2인 리스트이고, 각 원소는 numpy array 임 \n\n---\n\n(3단계) net.compile()\n\n(4단계) net.fit()\n\n결과확인 \n\n#### 풀이4: 벡터버전, 임의의 초기값을 설정 \n\n(0단계) 데이터정리 \n\n(1단계) net생성 \n\n(2단계) net.add(layer) \n\n---\n\n***초기값을 설정하자***\n\n---\n\n(3단계) net.compile()\n\n(4단계) net.fit()\n\n- 똑같이 잘 나옴.\n\n`-` 사실 실전에서는 초기값을 설정할 필요가 별로 없음. \n\n#### 풀이5: 벡터버전 사용자정의 손실함수 \n\n(0단계) 데이터정리 \n\n(1단계) net생성 \n\n(2단계) net.add(layer) \n\n(3단계) net.compile()\n\n- 사용자가 직접 loss function을 정의해서 컴파일해도 상관없다.\n\n(4단계) net.fit()\n\n- 잘 수렴한다...\n\n#### 풀이6: 벡터버전, net.compile의 옵션으로 손실함수 지정 \n\n(0단계) 데이터정리 \n\n(1단계) net생성 \n\n(2단계) net.add(layer) \n\n(3단계) net.compile()\n\n(4단계) net.fit()\n\n#### 풀이7: 벡터버전, net.compile의 옵션으로 손실함수 지정 + 옵티마이저 지정 \n\n(0단계) 데이터정리 \n\n(1단계) net생성 \n\n(2단계) net.add(layer) \n\n(3단계) net.compile()\n\n(4단계) net.fit()\n\n- 아까보다 에폭을 좀 더 늘리면 $2.58, 3.93$으로 수렴!\n\n### 여러가지 회귀모형의 적합과 학습과정의 모니터링 \n\n#### 예제1\n\nmodel: $y_i \\approx \\beta_0 +\\beta_1 x_i$ \n\n더 좋은 적합선을 얻기위해서!\n\n- $loss'(\\beta)=-2X'y +2X'X\\beta$\n\n초록색이 좀 더 나아보인다. \n\n- 좀 안정적인 건 $0.1$ \n- $0.3, 0.9$는 수렴은 하는데 좀 더 안전한건 $0.1$\n- $1\\sim$ 는 수렴하는척하면서 터짐... \n\n`-` 참고\n\n#### 예제2\n\nmodel: $y_i \\approx \\beta_0 +\\beta_1 e^{-x_i}$ \n\n#### 예제3\n\nmodel: $y_i \\approx \\beta_0 +\\beta_1 e^{-x_i} + \\beta_2 \\cos(5x_i)$ \n\n- true가 잘 찾아짐.\n\n#### 예제3: 케라스로 해보자!\n\nmodel: $y_i \\approx \\beta_0 +\\beta_1 e^{-x_i} + \\beta_2 \\cos(5x_i)$ \n\n### 숙제\n\n#### 예제2: 케라스를 이용하여 아래를 만족하는 적절한 $\\beta_0$와 $\\beta_1$을 구하라. 적합결과를 시각화하라. (애니메이션 시각화 X) \n\nmodel: $y_i \\approx \\beta_0 +\\beta_1 e^{-x_i}$ \n","srcMarkdownNoYaml":"\n\n### 강의영상 \n\n> youtube: https://youtube.com/playlist?list=PLQqh36zP38-zueMdNhXiDTIMD-Dz5sbBD\n\n### imports \n\n### $x \\to \\hat{y}$ 가 되는 과정을 그림으로 그리기\n\n`-` 단순회귀분석의 예시\n- $\\hat{y}_i = \\hat{\\beta}_0 + \\hat{\\beta}_1 x_i, \\quad i=1,2,\\dots,n$\n\n(표현1)\n\n`-` 표현1의 소감? \n- 교수님이 고생해서 만든것 같음 \n- 그런데 그냥 다 똑같은 그림의 반복이라 사실 고생한 의미가 없음. \n\n(표현2)\n\n`-` 그냥 아래와 같이 그리고 \"모든 $i=1,2,3,\\dots,n$에 대하여 $\\hat{y}_i$을 아래의 그림과 같이 그린다\"고 하면 될것 같다. \n\n(표현3) \n\n`-` 그런데 \"모든 $i=1,2,3,\\dots,n$에 대하여 $\\hat{y}_i$을 아래의 그림과 같이 그린다\" 라는 언급자체도 반복할 필요가 없을 것 같다. (어차피 당연히 그럴테니까) 그래서 단순히 아래와 같이 그려도 무방할듯 하다. \n\n(표현4)\n\n`-` 위의 모델은 아래와 같이 쓸 수 있다. ($\\beta_0$를 바이어스로 표현) \n\n- 실제로는 이 표현을 많이 사용함 \n\n(표현5)\n\n`-` 벡터버전으로 표현하면 아래와 같다. 이 경우에는 ${\\bf X}=[1,x]$에 포함된 1이 bias의 역할을 해주므로 `bias = False` 임. \n\n- 저는 이걸 좋아해요 \n\n(표현5)'\n\n`-` 딥러닝에서는 $\\hat{\\boldsymbol{\\beta}}$ 대신에 $\\hat{{\\bf W}}$을 라고 표현한다. \n\n`-` 실제로는 표현4 혹은 표현5를 외우면 된다. \n\n### Layer의 개념 \n\n`-` (표현4) 혹은 (표현5)의 그림은 레이어로 설명할 수 있다. \n\n`-` 레이어는 항상 아래와 같은 규칙을 가진다. \n- 첫 동그라미는 레이어의 입력이다. \n- 첫번째 화살표는 선형변환을 의미한다. \n- 두번째 동그라미는 선형변환의 결과이다. (이때 bias가 false인지 true인지에 따라서 실제 수식이 조금 다름) \n- 두번째 화살표는 두번째 동그라미에 어떠한 함수 $f$를 취하는 과정을 의미한다. (우리의 그림에서는 $f(x)=x$) \n- 세번째 동그라미는 레이어의 최종출력이다. \n\n`-` 엄청 복잡한데, 결국 레이어를 만들때 위의 그림들을 의미하도록 하려면 아래의 4개의 요소만 필요하다. \n1. 레이어의 입력차원 \n2. 선형변환의 결과로 얻어지는 차원\n3. 선형변환에서 바이어스를 쓸지? 안쓸지? \n4. 함수 $f$\n\n`-` 주목: 1,2가 결정되면 자동으로 $\\hat{{\\bf W}}$의 차원이 결정된다. \n\n(예시)\n- 레이어의 입력차원=2, 선형변환의 결과로 얻어지는 차원=1: $\\hat{\\bf W}$는 (2,1) 매트릭스 \n- 레이어의 입력차원=20, 선형변환의 결과로 얻어지는 차원=5: $\\hat{\\bf W}$는 (20,5) 매트릭스 \n- 레이어의 입력차원=2, 선형변환의 결과로 얻어지는 차원=50: $\\hat{\\bf W}$는 (2,50) 매트릭스 \n\n\n`-` 주목2: 이중에서 절대 생략불가능 것은 **<font color='red'>\"2. 선형변환의 결과로 얻어지는 차원\"</font>**  이다. \n- 레이어의 입력차원: 실제 레이어에 데이터가 들어올 때 데이터의 입력차원을 컴퓨터 스스로 체크하여 $\\hat{\\bf W}$의 차원을 결정할 수 있음. \n- 바이어스를 쓸지? 안쓸지? 기본적으로 쓴다고 가정한다. \n- 함수 $f$: 기본적으로 항등함수를 가정하면 된다. \n\n### Keras를 이용한 풀이 \n\n`-` 기본뼈대: net생성 $\\to$ add(layer) $\\to$ compile(opt,loss) $\\to$ fit(data,epochs) \n\n`-` 데이터정리 \n\n$${\\bf y}\\approx 2.5 +4*x$$ \n\n#### 풀이1: 스칼라버전 \n\n(0단계) 데이터정리 \n\n(1단계) net 생성 \n\n(2단계) net.add(layer) \n\n(3단계) net.compile(opt,loss_fn) \n\n#### (4단계) net.fit(x,y,epochs)\n\n- `batch_size=N` : 경사하강법\n- `batch_size!=N` : 확률적 경사하강법\n\n(결과확인) \n\n- 스칼라버전 끝!\n\n#### 풀이2: 벡터버전  \n\n(0단계) 데이터정리 \n\n(1단계) net 생성 \n\n(2단계) net.add(layer) \n\n(3단계) net.compile(opt,loss_fn) \n\n(4단계) net.fit(x,y,epochs)\n\n(결과확인) \n\n::: {.callout-note}\n### 잠시문법정리 \n\n`-` 잠깐 Dense layer를 만드는 코드를 정리해보자. \n\n(1) 아래는 모두 같은 코드이다. \n- tf.keras.layers.Dense(1) \n- tf.keras.layers.Dense(units=1) \n- tf.keras.layers.Dense(units=1,activation='linear') // identity 가 더 맞는것 같은데.. \n- tf.keras.layers.Dense(units=1,activation='linear',use_bias=True) \n\n(2) 아래의 코드1,2는 (1)의 코드들과 살짝 다른코드이다. (코드1과 코드2는 같은코드임) \n- tf.keras.layers.Dense(1,input_dim=2) # 코드1\n- tf.keras.layers.Dense(1,input_shape=(2,)) # 코드2 \n\n\n(3) 아래는 사용불가능한 코드이다. \n- tf.keras.layers.Dense(1,input_dim=(2,)) # 코드1\n- tf.keras.layers.Dense(1,input_shape=2) # 코드2 \n:::\n\n`-` 왜 input_dim이 필요한가?\n\n#### 풀이3: 스칼라버전, 임의의 초기값을 설정 \n\n(0단계) 데이터정리 \n\n(1단계) net생성 \n\n(2단계) net.add(layer)\n\n- weight, bias 순으로 출력\n\n--- \n\n***초기값을 설정***\n\n- weight, bias순으로 출력 \n\n-  layer_b.set_weights(layer_a.get_weights()) 와 같은방식으로 쓴다는 것이군? \n\n`-` 한번따라해보자. \n\n- 길이가 2인 리스트이고, 각 원소는 numpy array 임 \n\n---\n\n(3단계) net.compile()\n\n(4단계) net.fit()\n\n결과확인 \n\n#### 풀이4: 벡터버전, 임의의 초기값을 설정 \n\n(0단계) 데이터정리 \n\n(1단계) net생성 \n\n(2단계) net.add(layer) \n\n---\n\n***초기값을 설정하자***\n\n---\n\n(3단계) net.compile()\n\n(4단계) net.fit()\n\n- 똑같이 잘 나옴.\n\n`-` 사실 실전에서는 초기값을 설정할 필요가 별로 없음. \n\n#### 풀이5: 벡터버전 사용자정의 손실함수 \n\n(0단계) 데이터정리 \n\n(1단계) net생성 \n\n(2단계) net.add(layer) \n\n(3단계) net.compile()\n\n- 사용자가 직접 loss function을 정의해서 컴파일해도 상관없다.\n\n(4단계) net.fit()\n\n- 잘 수렴한다...\n\n#### 풀이6: 벡터버전, net.compile의 옵션으로 손실함수 지정 \n\n(0단계) 데이터정리 \n\n(1단계) net생성 \n\n(2단계) net.add(layer) \n\n(3단계) net.compile()\n\n(4단계) net.fit()\n\n#### 풀이7: 벡터버전, net.compile의 옵션으로 손실함수 지정 + 옵티마이저 지정 \n\n(0단계) 데이터정리 \n\n(1단계) net생성 \n\n(2단계) net.add(layer) \n\n(3단계) net.compile()\n\n(4단계) net.fit()\n\n- 아까보다 에폭을 좀 더 늘리면 $2.58, 3.93$으로 수렴!\n\n### 여러가지 회귀모형의 적합과 학습과정의 모니터링 \n\n#### 예제1\n\nmodel: $y_i \\approx \\beta_0 +\\beta_1 x_i$ \n\n더 좋은 적합선을 얻기위해서!\n\n- $loss'(\\beta)=-2X'y +2X'X\\beta$\n\n초록색이 좀 더 나아보인다. \n\n- 좀 안정적인 건 $0.1$ \n- $0.3, 0.9$는 수렴은 하는데 좀 더 안전한건 $0.1$\n- $1\\sim$ 는 수렴하는척하면서 터짐... \n\n`-` 참고\n\n#### 예제2\n\nmodel: $y_i \\approx \\beta_0 +\\beta_1 e^{-x_i}$ \n\n#### 예제3\n\nmodel: $y_i \\approx \\beta_0 +\\beta_1 e^{-x_i} + \\beta_2 \\cos(5x_i)$ \n\n- true가 잘 찾아짐.\n\n#### 예제3: 케라스로 해보자!\n\nmodel: $y_i \\approx \\beta_0 +\\beta_1 e^{-x_i} + \\beta_2 \\cos(5x_i)$ \n\n### 숙제\n\n#### 예제2: 케라스를 이용하여 아래를 만족하는 적절한 $\\beta_0$와 $\\beta_1$을 구하라. 적합결과를 시각화하라. (애니메이션 시각화 X) \n\nmodel: $y_i \\approx \\beta_0 +\\beta_1 e^{-x_i}$ \n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"2022_04_11_(6주차)_4월11일.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.315","theme":"cosmo","code-copy":true,"title-block-banner":true,"title":"**[STBDA]** 6wk. 회귀모형 적합 with keras","author":"JiyunLim","date":"05/18/2023","categories":["빅데이터분석특강"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}