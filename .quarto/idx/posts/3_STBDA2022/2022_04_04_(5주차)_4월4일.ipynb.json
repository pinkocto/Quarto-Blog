{"title":"**[STBDA]** 5wk. optimizer를 이용한 최적화","markdown":{"yaml":{"title":"**[STBDA]** 5wk. optimizer를 이용한 최적화","author":"JiyunLim","date":"05/16/2023","categories":["빅데이터분석특강"]},"headingText":"강의영상","containsRefs":false,"markdown":"\n\n\n\n> youtube: https://youtube.com/playlist?list=PLQqh36zP38-wVWUAZ5xT35INvWbNOXpBx\n\n옵티마이저를 이용하면 이전의 그 수식들을 다 기억하고 있지 않아도 된다는 장점!\n\n### imports \n\n### 최적화의 문제 \n\n`-` $loss=(\\frac{1}{2}\\beta-1)^2$ \n\n`-` 기존에 했던 방법은 수식을 알고 있어야 한다는 단점이 있음 \n\n### tf.keras.optimizers를 이용한 최적화방법 \n\n#### 방법1: opt.apply_gradients()를 이용 \n\n`-` iter1\n\n::: {.callout-warning}\n`opt.apply_gradients()`의 입력은 pair의 list\n:::\n\n`-` iter2\n\n- $-10 \\to -9.99 \\to -9.98\\to \\dots$\n\n`-` for문으로 정리 \n\n- opt.apply_gradients()의 입력은 pair 의 list \n\n- 지난시간에 했던 것이 optimizer로 완벽히 구현되었다!\n\n#### 방법2: opt.minimize()\n\n> 방법2는 GradientTape()를 안써도 된다.\n\n- `lambda x: x**2` <=> `lambda(x)=x^2`\n- `lambda x,y: x+y` <=> `lambda(x,y)=x+y` \n- `lambda: y` <=> `lambda()=y`, 입력이 없으며 출력은 항상 y인 함수 \n\n`-` iter 1\n\n`-` iter2 \n\n`-` for문으로 정리하면 \n\n### 회귀분석 문제\n\n`-` ${\\bf y} \\approx 2.5 + 4.0 {\\bf x}$\n\n### 이론적 풀이\n\n#### 풀이1: 스칼라버전\n\n`-` 포인트 \n- $S_{xx}=$, $S_{xy}=$\n- $\\hat{\\beta}_0=$, $\\hat{\\beta}_1=$\n\n`-` 풀이\n\n#### 풀이2: 벡터버전\n\n`-` 포인트\n- $\\hat{\\beta}=(X'X)^{-1}X'y$\n\n`-` 풀이\n\n#### 풀이3: 벡터버전, 손실함수의 도함수이용 \n\n`-` 포인트\n\n\n- $loss'(\\beta)=-2X'y +2X'X\\beta$\n- $\\beta_{new} = \\beta_{old} - \\alpha \\times loss'(\\beta_{old})$\n\n`-` 풀이\n\n- 앞으로는 MSE 버전으로 할 것임. (sample 수가 커질때마다 alpha 값을 조정하기가 너무 귀찮으니까..)\n\n### GradientTape를 이용 \n\n#### 풀이1: 벡터버전\n\n`-` 포인트\n```python\n## 포인트코드1: 그레디언트 테입  \nwith tf.GradientTape() as tape: \n    loss = \n## 포인트코드2: 미분 \nslope = tape.gradient(loss,beta_hat) \n## 포인트코드3: update \nbeta_hat.assign_sub(slope*alph) \n```\n\n`-` 풀이\n\n- 위에서 구한것과 같음!\n\n#### 풀이2: 스칼라버전\n\n`-` 포인트\n```python\n## 포인트코드: 미분\nslope0,slope1 = tape.gradient(loss,[beta0_hat,beta1_hat])\n```\n\n`-` 풀이\n\n- loss를 `tf.reduce_sum((y-yhat)**2)/N` 이렇게 해야 속도가 훨씬 빠름..\n- loss= `sum((y-yhat)**2)/N` 얘와 같지만 속도는 다름!\n\n### GradientTape + opt.apply_gradients\n\n#### 풀이1: 벡터버전 \n\n`-` 포인트 \n```python\n## 포인트코드: 업데이트\nopt.apply_gradients([(slope,beta_hat)])  ## pair의 list가 입력 \n```\n\n`-` 풀이\n\n#### 풀이2: 스칼라버전 \n\n`-` 포인트\n```python\n## 포인트코드: 업데이트 \nopt.apply_gradients([(slope0,beta0_hat),(slope1,beta1_hat)]) ## pair의 list가 입력 \n```\n\n`-` 풀이\n\n- pair의 list `[(slope0,beta0_hat),(slope1,beta1_hat)]`이런 형태가 필요함.\n- 미분하는 애들이 여러개 있을 때는 리스트로 전달함으로써 연산을 용이하게 함. (리스트로 전달하는 이유.)\n\n### opt.minimize\n\n#### 풀이1: 벡터버전, 사용자정의 손실함수 with lambda\n\n`-` 풀이 \n\n- $\\hat{\\beta}$이 적절히 잘 추론됨.\n\n#### 풀이2: 스칼라버전, 사용자정의 손실함수 with lambda\n\n`-` 포인트\n```python\n## 포인트코드: 미분 & 업데이트 = minimize \nopt.minimize(loss_fn,[beta0_hat,beta1_hat])\n```\n\n`-` 풀이 \n\n- 결과는 동일.\n\n#### 풀이3: 벡터버전, 사용자정의 (짧은) 손실함수 \n\n`-` 포인트\n```python\n## 포인트코드: 손실함수정의 \ndef loss_fn():\n    return ??\n```\n\n`-` 풀이 \n\n#### 풀이4: 벡터버전, 사용자정의 (긴) 손실함수 \n\n`-` 포인트\n```python\n## 포인트코드: 손실함수정의 \ndef loss_fn():\n    ??\n    ??\n    return ??\n```\n\n`-` 풀이 \n\n#### 풀이5: 벡터버전, 사용자정의 손실함수 <- tf.losses.MSE \n\n`-` 포인트\n```python\n## 포인트코드: 미리구현되어있는 손실함수 이용 \ntf.losses.MSE(y,yhat)\n```\n\n`-` 풀이 \n\n#### 풀이6: 벡터버전, 사용자정의 손실함수 <- tf.losses.MeaSquaredError\n\n`-` 포인트\n```python\n## 포인트코드: 클래스로부터 손실함수 오브젝트 생성 (함수를 찍어내는 클래스) \nmse_fn = tf.losses.MeanSquaredError()\nmse_fn(y,yhat)\n```\n\n`-` 풀이 \n\n- `mseloss_fn` = `tf.keras.losses.MSE` 라고 보면된다.  \n\n### tf.keras.Sequential\n\n`-` $\\hat{y}_i=\\hat{\\beta}_0+\\hat{\\beta}_1x_i$ 의 서로다른 표현 \n\n#### 풀이1: 벡터버전, 사용자정의 손실함수 \n\n`-` 포인트\n```python\n## 포인트코드1: 네트워크 생성 \nnet = tf.keras.Sequential()\n\n## 포인트코드2: 네트워크의 아키텍처 설계 \nnet.add(tf.keras.layers.Dense(1,input_shape=(2,),use_bias=False)) \n\n## 포인트코드3: 네트워크 컴파일 = 아키텍처 + 손실함수 + 옵티마이저\nnet.compile(opt,loss=loss_fn2)\n\n## 포인트코드4: 미분 & update \nnet.fit(X,y,epochs=1000,verbose=0,batch_size=N) \n```\n\n`-` 레이어: 입력 -> 레이어 -> 출력\n\n`-` 네트워크: 레이어들의 집합\n\n`-` 풀이 \n\n- network 안에 layer를 설계를 해야함.\n\n- `units`는 layer의 출력의 차원, 이 경우는 yhat의 차원, yhat은 (200,1) 이므로 1임. \n- `input_shape`는 layer의 입력의 차원, 이 경우는 X의 차원, X는 (200,2) 이므로 2임. \n\n- 네트워크 안에 레이어가 만들어졌다.\n","srcMarkdownNoYaml":"\n\n### 강의영상 \n\n\n> youtube: https://youtube.com/playlist?list=PLQqh36zP38-wVWUAZ5xT35INvWbNOXpBx\n\n옵티마이저를 이용하면 이전의 그 수식들을 다 기억하고 있지 않아도 된다는 장점!\n\n### imports \n\n### 최적화의 문제 \n\n`-` $loss=(\\frac{1}{2}\\beta-1)^2$ \n\n`-` 기존에 했던 방법은 수식을 알고 있어야 한다는 단점이 있음 \n\n### tf.keras.optimizers를 이용한 최적화방법 \n\n#### 방법1: opt.apply_gradients()를 이용 \n\n`-` iter1\n\n::: {.callout-warning}\n`opt.apply_gradients()`의 입력은 pair의 list\n:::\n\n`-` iter2\n\n- $-10 \\to -9.99 \\to -9.98\\to \\dots$\n\n`-` for문으로 정리 \n\n- opt.apply_gradients()의 입력은 pair 의 list \n\n- 지난시간에 했던 것이 optimizer로 완벽히 구현되었다!\n\n#### 방법2: opt.minimize()\n\n> 방법2는 GradientTape()를 안써도 된다.\n\n- `lambda x: x**2` <=> `lambda(x)=x^2`\n- `lambda x,y: x+y` <=> `lambda(x,y)=x+y` \n- `lambda: y` <=> `lambda()=y`, 입력이 없으며 출력은 항상 y인 함수 \n\n`-` iter 1\n\n`-` iter2 \n\n`-` for문으로 정리하면 \n\n### 회귀분석 문제\n\n`-` ${\\bf y} \\approx 2.5 + 4.0 {\\bf x}$\n\n### 이론적 풀이\n\n#### 풀이1: 스칼라버전\n\n`-` 포인트 \n- $S_{xx}=$, $S_{xy}=$\n- $\\hat{\\beta}_0=$, $\\hat{\\beta}_1=$\n\n`-` 풀이\n\n#### 풀이2: 벡터버전\n\n`-` 포인트\n- $\\hat{\\beta}=(X'X)^{-1}X'y$\n\n`-` 풀이\n\n#### 풀이3: 벡터버전, 손실함수의 도함수이용 \n\n`-` 포인트\n\n\n- $loss'(\\beta)=-2X'y +2X'X\\beta$\n- $\\beta_{new} = \\beta_{old} - \\alpha \\times loss'(\\beta_{old})$\n\n`-` 풀이\n\n- 앞으로는 MSE 버전으로 할 것임. (sample 수가 커질때마다 alpha 값을 조정하기가 너무 귀찮으니까..)\n\n### GradientTape를 이용 \n\n#### 풀이1: 벡터버전\n\n`-` 포인트\n```python\n## 포인트코드1: 그레디언트 테입  \nwith tf.GradientTape() as tape: \n    loss = \n## 포인트코드2: 미분 \nslope = tape.gradient(loss,beta_hat) \n## 포인트코드3: update \nbeta_hat.assign_sub(slope*alph) \n```\n\n`-` 풀이\n\n- 위에서 구한것과 같음!\n\n#### 풀이2: 스칼라버전\n\n`-` 포인트\n```python\n## 포인트코드: 미분\nslope0,slope1 = tape.gradient(loss,[beta0_hat,beta1_hat])\n```\n\n`-` 풀이\n\n- loss를 `tf.reduce_sum((y-yhat)**2)/N` 이렇게 해야 속도가 훨씬 빠름..\n- loss= `sum((y-yhat)**2)/N` 얘와 같지만 속도는 다름!\n\n### GradientTape + opt.apply_gradients\n\n#### 풀이1: 벡터버전 \n\n`-` 포인트 \n```python\n## 포인트코드: 업데이트\nopt.apply_gradients([(slope,beta_hat)])  ## pair의 list가 입력 \n```\n\n`-` 풀이\n\n#### 풀이2: 스칼라버전 \n\n`-` 포인트\n```python\n## 포인트코드: 업데이트 \nopt.apply_gradients([(slope0,beta0_hat),(slope1,beta1_hat)]) ## pair의 list가 입력 \n```\n\n`-` 풀이\n\n- pair의 list `[(slope0,beta0_hat),(slope1,beta1_hat)]`이런 형태가 필요함.\n- 미분하는 애들이 여러개 있을 때는 리스트로 전달함으로써 연산을 용이하게 함. (리스트로 전달하는 이유.)\n\n### opt.minimize\n\n#### 풀이1: 벡터버전, 사용자정의 손실함수 with lambda\n\n`-` 풀이 \n\n- $\\hat{\\beta}$이 적절히 잘 추론됨.\n\n#### 풀이2: 스칼라버전, 사용자정의 손실함수 with lambda\n\n`-` 포인트\n```python\n## 포인트코드: 미분 & 업데이트 = minimize \nopt.minimize(loss_fn,[beta0_hat,beta1_hat])\n```\n\n`-` 풀이 \n\n- 결과는 동일.\n\n#### 풀이3: 벡터버전, 사용자정의 (짧은) 손실함수 \n\n`-` 포인트\n```python\n## 포인트코드: 손실함수정의 \ndef loss_fn():\n    return ??\n```\n\n`-` 풀이 \n\n#### 풀이4: 벡터버전, 사용자정의 (긴) 손실함수 \n\n`-` 포인트\n```python\n## 포인트코드: 손실함수정의 \ndef loss_fn():\n    ??\n    ??\n    return ??\n```\n\n`-` 풀이 \n\n#### 풀이5: 벡터버전, 사용자정의 손실함수 <- tf.losses.MSE \n\n`-` 포인트\n```python\n## 포인트코드: 미리구현되어있는 손실함수 이용 \ntf.losses.MSE(y,yhat)\n```\n\n`-` 풀이 \n\n#### 풀이6: 벡터버전, 사용자정의 손실함수 <- tf.losses.MeaSquaredError\n\n`-` 포인트\n```python\n## 포인트코드: 클래스로부터 손실함수 오브젝트 생성 (함수를 찍어내는 클래스) \nmse_fn = tf.losses.MeanSquaredError()\nmse_fn(y,yhat)\n```\n\n`-` 풀이 \n\n- `mseloss_fn` = `tf.keras.losses.MSE` 라고 보면된다.  \n\n### tf.keras.Sequential\n\n`-` $\\hat{y}_i=\\hat{\\beta}_0+\\hat{\\beta}_1x_i$ 의 서로다른 표현 \n\n#### 풀이1: 벡터버전, 사용자정의 손실함수 \n\n`-` 포인트\n```python\n## 포인트코드1: 네트워크 생성 \nnet = tf.keras.Sequential()\n\n## 포인트코드2: 네트워크의 아키텍처 설계 \nnet.add(tf.keras.layers.Dense(1,input_shape=(2,),use_bias=False)) \n\n## 포인트코드3: 네트워크 컴파일 = 아키텍처 + 손실함수 + 옵티마이저\nnet.compile(opt,loss=loss_fn2)\n\n## 포인트코드4: 미분 & update \nnet.fit(X,y,epochs=1000,verbose=0,batch_size=N) \n```\n\n`-` 레이어: 입력 -> 레이어 -> 출력\n\n`-` 네트워크: 레이어들의 집합\n\n`-` 풀이 \n\n- network 안에 layer를 설계를 해야함.\n\n- `units`는 layer의 출력의 차원, 이 경우는 yhat의 차원, yhat은 (200,1) 이므로 1임. \n- `input_shape`는 layer의 입력의 차원, 이 경우는 X의 차원, X는 (200,2) 이므로 2임. \n\n- 네트워크 안에 레이어가 만들어졌다.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"2022_04_04_(5주차)_4월4일.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.315","theme":"cosmo","code-copy":true,"title-block-banner":true,"title":"**[STBDA]** 5wk. optimizer를 이용한 최적화","author":"JiyunLim","date":"05/16/2023","categories":["빅데이터분석특강"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}