{"title":"**[STBDA]** 3wk. 텐서플로우 intro2 (tf.GradientTape())","markdown":{"yaml":{"title":"**[STBDA]** 3wk. 텐서플로우 intro2 (tf.GradientTape())","author":"JiyunLim","date":"05/12/2023","categories":["빅데이터분석특강"]},"headingText":"(3주차) 3월21일","containsRefs":false,"markdown":"\n\n\n### 강의영상 \n\n> youtube: https://youtube.com/playlist?list=PLQqh36zP38-yCZH5zqsORTEkCZ082SCYc\n\n### imports \n\n### 지난강의 보충 \n\n`-` max, min, sum, mean \n\n#### concat, stack \n\n`-` 예제: (2,3,4,5) stack (2,3,4,5) -> (?,?,?,?,?) \n\n<div class=\"alert alert-block alert-info\">\n<b>Tip:</b> 총 5가지 case가 있다.<br>\n    <strong>case1</strong> (1,2,3,4,5) stack (1,2,3,4,5) --> (2,2,3,4,5) # axis=0 <br>\n    <strong>case2</strong> (2,1,3,4,5) stack (2,1,3,4,5) --> (2,2,3,4,5) # axis=1 <br>\n    <strong>case3</strong> (2,3,1,4,5) stack (2,3,1,4,5) --> (2,3,2,4,5) # axis=2 <br>\n    <strong>case4</strong> (2,3,4,1,5) stack (2,3,4,1,5)  -->  (2,3,4,2,5) # axis=3 <br>\n    <strong>case5</strong> (2,3,4,5,1) stack (2,3,4,5,1) --> (2,3,4,5,2) # axis=4\n</div>\n\n**case1** (1,2,3,4,5) stack (1,2,3,4,5) --> (2,2,3,4,5) # axis=0 \n \n\n**case2** (2,1,3,4,5) stack (2,1,3,4,5) --> (2,2,3,4,5) # axis=1\n\n**case3** (2,3,1,4,5) stack (2,3,1,4,5) --> (2,3,2,4,5) # axis=2\n\n**case4** (2,3,4,1,5) stack (2,3,4,1,5)  -->  (2,3,4,2,5) # axis=3\n\n**case5** (2,3,4,5,1) stack (2,3,4,5,1) --> (2,3,4,5,2) # axis=4\n\n`-` 예제: (2,3,4), (2,3,4), (2,3,4)\n\n(예시1) (2,3,4), (2,3,4), (2,3,4) $\\to$ (6,3,4)\n\n(예시2) (2,3,4), (2,3,4), (2,3,4) $\\to$ (2,9,4)\n\n(예시3) (2,3,4), (2,3,4), (2,3,4) $\\to$ (2,3,12)\n\n(예시4) (2,3,4), (2,3,4), (2,3,4) $\\to$ (3,2,3,4)\n\n\n- 축이 늘어난 경우\n\n(예시5) (2,3,4), (2,3,4), (2,3,4) $\\to$ (2,3,3,4)\n\n(예시6) (2,3,4), (2,3,4), (2,3,4) $\\to$ (2,3,3,4) \n\n(예시7) (2,3,4), (2,3,4), (2,3,4) $\\to$ (2,3,4,3) \n\n`-` 예제: (2,3,4) (4,3,4) $\\to$ (6,3,4) \n\n`-` (2,2) @ (2,) 의 연산? \n\n**numpy**\n\n- 차원이 안맞는데 계산이 된다?\n\n--> 요약: numpy에서 길이가 2인 벡터는 매트릭스를 곱할 때 알아서 계산이 되서 결과가 나옴.\n\n**tensorflow**\n\n---\n\n### tf.Variable\n\n되게 쓸모없어 보이는데 쉽고, 중요합니다.\n\n#### 선언 \n\n`-` tf.Variable()로 선언\n\n`-` tf.constant() 선언후 변환\n\n- type이 ResourceVariable\n\n`-` np 등으로 선언후 변환 \n\n#### 타입\n\n#### 인덱싱 \n\n- 연산하는 순간 type이 EagerTensor로 바뀜\n\n#### 연산가능 \n\ntf.Variable로 열심히 만들어도 연산하는 순간 tf.constant로 바뀜.. (자료형이 깨짐)\n\n#### tf.Variable도 쓰기 불편함 \n\n#### tnp의 은총도 일부만 가능 \n\n`-` 알아서 형 변환 \n\n`-` .reshape 메소드 \n\n- tf.constant는 되는데 tf.Variable은 또 안됨...\n\n#### 대부분의 동작은 tf.constant랑 큰 차이를 모르겠음 \n\n`-` tf.concat \n\n`-` tf.stack\n\n- 이건 비슷한데?\n\n#### 변수값변경가능(?)\n\n- 새로만드는 것은 되는데 수정은 안됨. (즉, 재할당밖에 안됨. 수정은 안돼)\n- 근데 가변형으로 만들어 주는것이 좋은데.. (불변형을 사용하려면 메모리가 커야해..)\n- 그래서 편집 가능한 변수로 선언하는 것이 의미가 있다.\n- 보통 딥러닝 학습할 때 Data는 RAM에 올리고 파라미터는 GPU에 올린다. (GPU에 올리면 미분계산(선형연산)이 빨라짐)\n\n- 주소값이 똑같으니까 편집!\n\n#### 요약 \n\n`-` tf.Variable()로 만들어야 하는 뚜렷한 차이는 모르겠음. \n\n`-` 애써 tf.Variable()로 만들어도 간단한연산을 하면 그 결과는 tf.constant()로 만든 오브젝트와 동일해짐. \n\n### 미분 \n\n#### 모티브\n\n`-` 예제: 컴퓨터를 이용하여 $x=2$에서 $y=3x^2$의 접선의 기울기를 구해보자. \n\n(손풀이) \n\n$$\\frac{dy}{dx}=6x$$\n\n이므로 $x=2$를 대입하면 12이다. \n\n(컴퓨터를 이용한 풀이)\n\n**단계1**\n\n**단계2**\n\n**단계3**\n\n**단계4** \n\n$$f(x,y)= x^2 +3y$$\n\n#### tf.GradientTape() 사용방법 \n\n`-` 예제1: $x=2$에서 $y=3x^2$의 도함수값을 구하라. \n\n- 실행결과 오브젝트로 나왔는데 ,그것이 0x7f7d4c6cfdf0 이 메모리 주소 안에 있다.\n\n- 그럼 mytape에는 뭔가가 기록되어 있을 것이다.\n- 위의 코드에서 `__enter__()`와 `__exit__()`는 고정이라고 생각\n- 그 사이에는 수식쓰기\n\n- 미분 결과 12\n\n`-` 예제2: 조금 다른예제 \n\n- 실행은 되는데 결과가 틀림! 왜 18이지?\n\n$$a=\\frac{3}{2}x$$\n$$y=ax^2=\\frac{3}{2}x^3$$\n\n$$\\frac{dy}{dx}=\\frac{3}{2} 3x^2$$\n\n`-` 테이프의 개념 ($\\star$)\n\n(상황) \n\n우리가 어려운 미분계산을 컴퓨터에게 부탁하는 상황임. (예를들면 $y=3x^2$) 컴퓨터에게 부탁을 하기 위해서는 연습장(=테이프)에 $y=3x^2$이라는 수식을 써서 보여줘야하는데 이때 컴퓨터에게 target이 무엇인지 그리고 무엇으로 미분하고 싶은 것인지를 명시해야함. \n\n(1) `mytape = tf.GradientTape()`: tf.GradientTape()는 연습장을 만드는 명령어, 만들어진 연습장을 mytape라고 이름을 붙인다. \n\n(2) `mytape.__enter__()`: 만들어진 공책을 연다 (=기록할수 있는 상태로 만든다) \n\n(3) `a=x/2*3; y=a*x**2`: 컴퓨터에게 전달할 수식을 쓴다 \n\n(4) `mytape.__exit__(None,None,None)`: 공책을 닫는다. \n\n(5) `mytape.gradient(y,x)`: $y$를 $x$로 미분하라는 메모를 남기고 컴퓨터에게 전달한다. \n\n`-` 예제3: **연습장을 언제 열고 닫을지 결정하는건 중요하다.**\n\n`-` 예제4: with문과 함께 쓰는 tf.GradientTape()\n\n열고 > 쓰고 > 닫고 > 컴퓨터에 전달 -->> 이 과정을 간략하게 매크로화 시키자.\n\n(문법해설)\n\n아래와 같이 쓴다. \n```python \nwith expression as myname:\n    ## with문 시작: myname.__enter__() \n    blabla ~ \n    yadiyadi !! \n    ## with문 끝: myname.__exit__()\n```\n\n(1) expression 의 실행결과 오브젝트가 생성, 생성된 오브젝트는 myname라고 이름붙임. 이 오브젝트는 `.__enter__()`와 `.__exit__()`를 숨겨진 기능으로 포함해야 한다. \n\n(2) with문이 시작되면서 `myname.__enter__()`이 실행된다. \n\n(3) 블라블라와 야디야디가 실행된다. \n\n(4) with문이 종료되면서 `myname.__exit__()`이 실행된다. \n\n`-` 예제5: 예제2를 with문과 함께 구현 \n\n`-` 예제6: persistent = True\n\n(관찰1)\n\n(관찰2) \n\n`-` 예제7: watch\n\n(관찰1)\n\n(관찰2)\n\n(관찰3)\n\n(관찰4)\n\n(관찰5)\n\n`-` 예제9: 카페예제로 돌아오자. \n\n`-` 예제10: 카페예제의 매트릭스 버전 \n\n`-` 예제11: 위의 예제에서 이론적인 $\\boldsymbol{\\beta}$의 최적값을 찾아보고 (즉 $\\hat{\\boldsymbol{\\beta}}$을 찾고) 그곳에서 loss의 미분을 구하라. 구한결과가 $\\begin{bmatrix}0 \\\\ 0 \\end{bmatrix}$ 임을 확인하라. \n","srcMarkdownNoYaml":"\n\n# (3주차) 3월21일 \n\n### 강의영상 \n\n> youtube: https://youtube.com/playlist?list=PLQqh36zP38-yCZH5zqsORTEkCZ082SCYc\n\n### imports \n\n### 지난강의 보충 \n\n`-` max, min, sum, mean \n\n#### concat, stack \n\n`-` 예제: (2,3,4,5) stack (2,3,4,5) -> (?,?,?,?,?) \n\n<div class=\"alert alert-block alert-info\">\n<b>Tip:</b> 총 5가지 case가 있다.<br>\n    <strong>case1</strong> (1,2,3,4,5) stack (1,2,3,4,5) --> (2,2,3,4,5) # axis=0 <br>\n    <strong>case2</strong> (2,1,3,4,5) stack (2,1,3,4,5) --> (2,2,3,4,5) # axis=1 <br>\n    <strong>case3</strong> (2,3,1,4,5) stack (2,3,1,4,5) --> (2,3,2,4,5) # axis=2 <br>\n    <strong>case4</strong> (2,3,4,1,5) stack (2,3,4,1,5)  -->  (2,3,4,2,5) # axis=3 <br>\n    <strong>case5</strong> (2,3,4,5,1) stack (2,3,4,5,1) --> (2,3,4,5,2) # axis=4\n</div>\n\n**case1** (1,2,3,4,5) stack (1,2,3,4,5) --> (2,2,3,4,5) # axis=0 \n \n\n**case2** (2,1,3,4,5) stack (2,1,3,4,5) --> (2,2,3,4,5) # axis=1\n\n**case3** (2,3,1,4,5) stack (2,3,1,4,5) --> (2,3,2,4,5) # axis=2\n\n**case4** (2,3,4,1,5) stack (2,3,4,1,5)  -->  (2,3,4,2,5) # axis=3\n\n**case5** (2,3,4,5,1) stack (2,3,4,5,1) --> (2,3,4,5,2) # axis=4\n\n`-` 예제: (2,3,4), (2,3,4), (2,3,4)\n\n(예시1) (2,3,4), (2,3,4), (2,3,4) $\\to$ (6,3,4)\n\n(예시2) (2,3,4), (2,3,4), (2,3,4) $\\to$ (2,9,4)\n\n(예시3) (2,3,4), (2,3,4), (2,3,4) $\\to$ (2,3,12)\n\n(예시4) (2,3,4), (2,3,4), (2,3,4) $\\to$ (3,2,3,4)\n\n\n- 축이 늘어난 경우\n\n(예시5) (2,3,4), (2,3,4), (2,3,4) $\\to$ (2,3,3,4)\n\n(예시6) (2,3,4), (2,3,4), (2,3,4) $\\to$ (2,3,3,4) \n\n(예시7) (2,3,4), (2,3,4), (2,3,4) $\\to$ (2,3,4,3) \n\n`-` 예제: (2,3,4) (4,3,4) $\\to$ (6,3,4) \n\n`-` (2,2) @ (2,) 의 연산? \n\n**numpy**\n\n- 차원이 안맞는데 계산이 된다?\n\n--> 요약: numpy에서 길이가 2인 벡터는 매트릭스를 곱할 때 알아서 계산이 되서 결과가 나옴.\n\n**tensorflow**\n\n---\n\n### tf.Variable\n\n되게 쓸모없어 보이는데 쉽고, 중요합니다.\n\n#### 선언 \n\n`-` tf.Variable()로 선언\n\n`-` tf.constant() 선언후 변환\n\n- type이 ResourceVariable\n\n`-` np 등으로 선언후 변환 \n\n#### 타입\n\n#### 인덱싱 \n\n- 연산하는 순간 type이 EagerTensor로 바뀜\n\n#### 연산가능 \n\ntf.Variable로 열심히 만들어도 연산하는 순간 tf.constant로 바뀜.. (자료형이 깨짐)\n\n#### tf.Variable도 쓰기 불편함 \n\n#### tnp의 은총도 일부만 가능 \n\n`-` 알아서 형 변환 \n\n`-` .reshape 메소드 \n\n- tf.constant는 되는데 tf.Variable은 또 안됨...\n\n#### 대부분의 동작은 tf.constant랑 큰 차이를 모르겠음 \n\n`-` tf.concat \n\n`-` tf.stack\n\n- 이건 비슷한데?\n\n#### 변수값변경가능(?)\n\n- 새로만드는 것은 되는데 수정은 안됨. (즉, 재할당밖에 안됨. 수정은 안돼)\n- 근데 가변형으로 만들어 주는것이 좋은데.. (불변형을 사용하려면 메모리가 커야해..)\n- 그래서 편집 가능한 변수로 선언하는 것이 의미가 있다.\n- 보통 딥러닝 학습할 때 Data는 RAM에 올리고 파라미터는 GPU에 올린다. (GPU에 올리면 미분계산(선형연산)이 빨라짐)\n\n- 주소값이 똑같으니까 편집!\n\n#### 요약 \n\n`-` tf.Variable()로 만들어야 하는 뚜렷한 차이는 모르겠음. \n\n`-` 애써 tf.Variable()로 만들어도 간단한연산을 하면 그 결과는 tf.constant()로 만든 오브젝트와 동일해짐. \n\n### 미분 \n\n#### 모티브\n\n`-` 예제: 컴퓨터를 이용하여 $x=2$에서 $y=3x^2$의 접선의 기울기를 구해보자. \n\n(손풀이) \n\n$$\\frac{dy}{dx}=6x$$\n\n이므로 $x=2$를 대입하면 12이다. \n\n(컴퓨터를 이용한 풀이)\n\n**단계1**\n\n**단계2**\n\n**단계3**\n\n**단계4** \n\n$$f(x,y)= x^2 +3y$$\n\n#### tf.GradientTape() 사용방법 \n\n`-` 예제1: $x=2$에서 $y=3x^2$의 도함수값을 구하라. \n\n- 실행결과 오브젝트로 나왔는데 ,그것이 0x7f7d4c6cfdf0 이 메모리 주소 안에 있다.\n\n- 그럼 mytape에는 뭔가가 기록되어 있을 것이다.\n- 위의 코드에서 `__enter__()`와 `__exit__()`는 고정이라고 생각\n- 그 사이에는 수식쓰기\n\n- 미분 결과 12\n\n`-` 예제2: 조금 다른예제 \n\n- 실행은 되는데 결과가 틀림! 왜 18이지?\n\n$$a=\\frac{3}{2}x$$\n$$y=ax^2=\\frac{3}{2}x^3$$\n\n$$\\frac{dy}{dx}=\\frac{3}{2} 3x^2$$\n\n`-` 테이프의 개념 ($\\star$)\n\n(상황) \n\n우리가 어려운 미분계산을 컴퓨터에게 부탁하는 상황임. (예를들면 $y=3x^2$) 컴퓨터에게 부탁을 하기 위해서는 연습장(=테이프)에 $y=3x^2$이라는 수식을 써서 보여줘야하는데 이때 컴퓨터에게 target이 무엇인지 그리고 무엇으로 미분하고 싶은 것인지를 명시해야함. \n\n(1) `mytape = tf.GradientTape()`: tf.GradientTape()는 연습장을 만드는 명령어, 만들어진 연습장을 mytape라고 이름을 붙인다. \n\n(2) `mytape.__enter__()`: 만들어진 공책을 연다 (=기록할수 있는 상태로 만든다) \n\n(3) `a=x/2*3; y=a*x**2`: 컴퓨터에게 전달할 수식을 쓴다 \n\n(4) `mytape.__exit__(None,None,None)`: 공책을 닫는다. \n\n(5) `mytape.gradient(y,x)`: $y$를 $x$로 미분하라는 메모를 남기고 컴퓨터에게 전달한다. \n\n`-` 예제3: **연습장을 언제 열고 닫을지 결정하는건 중요하다.**\n\n`-` 예제4: with문과 함께 쓰는 tf.GradientTape()\n\n열고 > 쓰고 > 닫고 > 컴퓨터에 전달 -->> 이 과정을 간략하게 매크로화 시키자.\n\n(문법해설)\n\n아래와 같이 쓴다. \n```python \nwith expression as myname:\n    ## with문 시작: myname.__enter__() \n    blabla ~ \n    yadiyadi !! \n    ## with문 끝: myname.__exit__()\n```\n\n(1) expression 의 실행결과 오브젝트가 생성, 생성된 오브젝트는 myname라고 이름붙임. 이 오브젝트는 `.__enter__()`와 `.__exit__()`를 숨겨진 기능으로 포함해야 한다. \n\n(2) with문이 시작되면서 `myname.__enter__()`이 실행된다. \n\n(3) 블라블라와 야디야디가 실행된다. \n\n(4) with문이 종료되면서 `myname.__exit__()`이 실행된다. \n\n`-` 예제5: 예제2를 with문과 함께 구현 \n\n`-` 예제6: persistent = True\n\n(관찰1)\n\n(관찰2) \n\n`-` 예제7: watch\n\n(관찰1)\n\n(관찰2)\n\n(관찰3)\n\n(관찰4)\n\n(관찰5)\n\n`-` 예제9: 카페예제로 돌아오자. \n\n`-` 예제10: 카페예제의 매트릭스 버전 \n\n`-` 예제11: 위의 예제에서 이론적인 $\\boldsymbol{\\beta}$의 최적값을 찾아보고 (즉 $\\hat{\\boldsymbol{\\beta}}$을 찾고) 그곳에서 loss의 미분을 구하라. 구한결과가 $\\begin{bmatrix}0 \\\\ 0 \\end{bmatrix}$ 임을 확인하라. \n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"2022_03_21_(3주차)_3월21일.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.315","theme":"cosmo","code-copy":true,"title-block-banner":true,"title":"**[STBDA]** 3wk. 텐서플로우 intro2 (tf.GradientTape())","author":"JiyunLim","date":"05/12/2023","categories":["빅데이터분석특강"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}