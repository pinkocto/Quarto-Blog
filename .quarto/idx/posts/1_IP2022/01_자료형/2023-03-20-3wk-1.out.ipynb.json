{"title":"03wk-1: 파이썬의 자료형 (4) -- O","markdown":{"yaml":{"title":"03wk-1: 파이썬의 자료형 (4) -- O","author":"jiyunLim","date":"09/18/2023","categories":["파이썬의 자료형"]},"headingText":"강의영상","containsRefs":false,"markdown":"\n\n> list 고급내용2,3 // 리스트컴프리헨션 //  튜플기본내용\n\n\n> <https://youtube.com/playlist?list=PLQqh36zP38-wtrnp6RqmbRVRrYVdualkl>\n\n# list 고급내용 2\n\n## 리스트 원소 추가\n\n(예제) 비어있는 리스트를 만들고 원소 0,1,2를 차례로 추가하여 보자.\n\n(풀이1) `+` 연산이용\n\n(풀이2) `+=` 이용\n\n-   반복되는 문자를 제거하고 연산의 순서를 바꾼다.\n\n(풀이3) 리스트 특수기능 `.append()`를 이용\n\n`-` 아래는 불가능하다.\n\n## `a+[4]`와 `a.append(4)`의 차이점은?\n\n(관찰1)\n\n(관찰2)\n\n비슷해보이지만 굉장히 미묘한 차이가 있음\n\n`a.append(4)`: `a`에 4를 append하라 $\\to$ `a`가 변함\n\n`a+[4]`: `a`와 `[4]`를 연산하라\n\n## 리스트 특수기능\n\n**(append)**\n\n**(clear)**\n\n**(copy)**\n\n**(count)**\n\n**(extend)**\n\n**(index)**\n\n**(insert)**\n\n**(pop)**\n\n**(remove)**\n\n**(reverse)**\n\n**(sort)**\n\n(다른예제들)\n\n## 중첩리스트\n\n`-` 리스트는 리스트를 원소로 받을 수 있으므로 아래와 같이 중첩된\n리스트를 만들 수 있다.\n\n`-` A는 1차원인 벡터가 아니라 2차원인 매트릭스로 이해할 수 있다.\n구체적으로는 아래와 같은 매트릭스로 이해할 수 있다\n\n\\$\n\n\\begin{bmatrix}\n1 & 2 & 3 \\\\ \n4 & 5 & 6 \\\\ \n7 & 8 & 9 \n\\end{bmatrix}\n\n\\$\n\n`-` A에서 (2,1)의 원소를 뽑고싶다 = 4를 뽑고싶다\n\n-   실패\n\n-   성공\n\n`-` 성공의 이유를 분석해보자.\n\n`-` 매트릭스는 아니지만 매트릭스 같음! - 1차원 배열을 다차원 배열로\n확장할 수 있는 기본 아이디어를 제공함\n\n# list 고급내용 3\n\n`-` 리스트컴프리헨션을 다룬다.\n\n## 예비학습1: for문 벼락치기\n\n`-` 리스트 컴프리헨션을 이해하기 전에 for문에 대하여 알아보자.\n\n프로그램안에서 반복해서 무엇인가를 하고싶다 $\\to$ for\n\n(예제) 1,2,3,4의 합을 for문을 이용하여 구해보자.\n\n`-` 궁금: 아래와 같은 코드가 있다고 하자.\n\n``` python\nfor i in ????: \n    print(i)\n```\n\n??? 자리에 올 수 있는건 무엇일까?\n\n-   대답하기 어려움.\n-   일단 list는 가능했음.\n\n(예시1)\n\n(예시2)\n\n(예시3)\n\n(예시4)\n\n(예시5)\n\n(예시6)\n\n## 예비학습2: range\n\n`-` `range(0,10)` 선언해보기\n\n-   이게뭐야?\n\n`-` 도움말 확인하기\n\n-   우리가 아는 범위에서는 모르겠음.. 이런게 있나보다 하고 넘어가야\n    하겠음\n\n`-` 형태변환으로 range(0,10)의 느낌 찾기\n\n-   이게 중요한것임. range(0,10)를 리스트화시키면 \\[0,1,…,9\\] 와 같은\n    리스트를 얻을 수 있음. $\\Rightarrow$ range(0,10)은 \\[0,1,…,9\\] 와\n    “비슷한 것” 임\n\n`-` `range()`의 활용\n\n------------------------------------------------------------------------\n\n## 리스트 컴프리헨션\n\n`-` 예제: $2^0, 2^1, 2^2, 2^3$를 원소로 가지는 리스트를 생성하라.\n\n(풀이1) 직접입력\n\n(풀이2) for문을 이용함\n\n(풀이3) for문을 이용함\n\n(풀이4) for문을 이용함\n\n(풀이5) 리스트컴프리헨션을 이용한 풀이\n\n`-` 리스트컴프리헨션의 문법 암기방법\n\n-   집합에서 조건제시법을 연상\n-   $\\{2^0,2^1,2^2,2^3\\}=\\{2^i: i \\in \\{0,1,2,3\\} \\}$\n\n`-` 리스트컴프리헨션이란?\n\n-   리스트를 매우 효율적으로 만드는 테크닉\n-   for문에 비하여 가지고 있는 장점: (1) 코드가 간결하다 (2) 빠르다\n\n## 리스트 컴프리헨션 연습\n\n`-` 예제1: 리스트 컴프리헨션을 이용하여 아래와 같은 리스트를 만들어라.\n\n(풀이)\n\n`-` 예제2: 리스트컴프리헨션을 이용하여 아래와 같은 리스트를 만들어라.\n\n(풀이)\n\n`-` 예제: 리스트컴프리헨션을 이용하여 아래와 같은 리스트를 만들어라.\n\n(풀이)\n\n(다른풀이) 참고로 for문을 쓰면 좀 복잡해진다.\n\n`-` 예제: 리스트컴프리헨션과 문자열 `'jbnu'`를 이용하여 아래와 같은\n리스트를 만들어라.\n\n(다른풀이) 아래와 같이 풀면 된다는것은 알고 있음\n\n(풀이)\n\n`-` 예제: 리스트컴프리헨션을 이용하여 아래와 같은 리스트를 만들어라.\n\n(풀이)\n\n## 리스트 컴프리헨션과 for문의 미묘한 차이\n\n(경우1)\n\n(경우2)\n\n> 진짜 미묘하게 다르죠?\n\n# 튜플 기본내용\n\n## 리스트 vs 튜플\n\n`-` 컨테이너형타입이라는 점, 그리고 연산 및 인덱싱을 하는 방법은\n리스트와 같음 - 차이점1: \\[\\] 대신에 ()를 사용한다. - 차이점2:\n불변형이다. (원소의 값을 바꿀 수 없음) - 차이점3: 하나의 원소를 선언할\n때는 (1,)와 같이 해야 한다. - 차이점4: 의미가 명확할때는 튜플의 ()를\n생략가능하다.\n\n`-` 컨테이너형이라는 것이 무슨의미?\n\n`-` 불변형이라는 것은 무슨의미?\n\n참고로 a를 튜플이 아니라 리스트로 선언하면 값이 잘 바뀐다.\n\n`-` 하나의 원소로 이루어진 튜플을 만들때는 쉼표를 붙여야 함.\n\n`-` 마지막차이점! 의미가 명확할때 튜플의 괄호는 생략가능하다. (이게\n중요합니다)\n\n의미가 명확할때 생략해야함\n\n## 선언\n\n`-` 소괄호를 이용\n\n`-` 생략가능하다는 점이 포인트\n\n`-` 원소가 하나인 튜플을 만들고 싶다면?\n\n## 연산\n\n`-` 리스트와 동일\n\n## 인덱싱\n\n`-` 리스트와 동일\n\n# HW 0320\n\n`1`. 아래의 코드를 관찰하고, `sum()`의 기능을 유추하라.\n\n(풀이)\n\n생략\n\n`2`. 다음과 같은 리스트를 고려하자.\n\n이를 수식으로 표현하면 아래와 같다.\n\n${\\bf x} = [x_1,\\dots,x_{13}]=[80,60,80,90,55,85,95,100,35,70,75,65,95]$\n\n리스트의 원소중 “$x_i>80$” 의 조건을 만족하는 원소는 모두 몇개인가?\n\n**hint:** 리스트컴프리헨션과 `sum()`함수를 이용할 것\n\n(풀이)\n\n`3`. 다음과 같은 리스트를 고려하자.\n\n이 리스트에서 ‘A’ 혹은 ’B’의 숫자는 모두 몇개인가?\n\n**hint:** 아래를 관찰\n\n(풀이)\n\n`4`. 아래와 같은 리스트가 있다고 하자.\n\n${\\bf x} = [1,2,1,5,6,2,4,7]$\n\n${\\bf y} = [3,2,4,1,2,5,6,7]$\n\n이러한 벡터를 파이썬에서 표현하기 위해서 아래와 같은 리스트를 만들었다고\n하자.\n\n리스트컴프리헨션을 이용하여\n\n$${\\bf z}=[x_1^2+y_1^2, \\dots, x_{8}^2+y_{8}^2]=[x_i^2+y_i^2: \\text{for $i = 1,2,3,\\dots,8$}]$$\n\n와 같은 리스트를 생성하라.\n\n(풀이)\n\n`5`. 아래와 같은 문자열이 있다고 하자.\n\n이 문자열에서 대문자의 수를 count하라. (2022년 파이썬입문 중간고사 1-(5)\n참고)\n\n\n(풀이)\n\n`6`. 리스트컴프리헨션을 이용하여 아래와 같은 리스트를 생성하라. (2022년\n파이썬입문 중간고사 1-(7) 참고)\n\n    ['a',\n     'aa',\n     'aaa',\n     'aaaa',\n     'aaaaa',\n     'aaaaaa',\n     'aaaaaaa',\n     'aaaaaaaa',\n     'aaaaaaaaa',\n     'aaaaaaaaaa'] <- a가 10개있음\n\n\n(풀이)\n\n`7`. 아래와 같은 list가 있다고 하자.\n\n`test_lst`와 리스트컴프리헨션을 이용하여 아래를 출력하는 코드를\n구현하라. (2022년 파이썬입문 중간고사 1-(9) 참고)\n\n(풀이)\n\n`8`. 아래와 같은 list를 생성하라.\n\n``` python\n[1,\n 2,2,\n 3,3,3,\n 4,4,4,4,\n 5,5,5,5,5,\n ...\n 9,9,9,9,9,9,9,9,9] <- 9가 9개 있음 \n```\n\n(풀이1) – 의도한 풀이\n\n(풀이2) – 이걸 의도한건 아니었음…\n\n`9`. 아래와 같은 리스트를 관찰하라.\n\n이러한 리스트를 아래와 같은 리스트로 변환하는 코드를 작성하라.\n\n**hint: string의 `.replace()`기능과 리스트 컴프리헨션의 응용**\n\n\n(풀이)\n\n`10`. 아래와 같은 문자열을 고려하라.\n\n띄어쓰기를 제거하는 코드를 구현하라. 즉 출력결과가 아래와 같도록 만드는\n코드를 구현하라.\n\n**hint**: 아래코드 관찰\n\n(풀이)\n\n`11`. 아래의 코드를 관찰하라.\n\nChatGPT를 이용하여 이 코드가 의미하는 내용을 유추하라.\n\n문자열 사이를 연결해주는 기능?\n\n(풀이)\n\n`.join()`은 문자열의 메서드 중 하나로, 문자열 리스트를 하나의 문자열로 결합하는 데 사용됩니다.\n\n`12`. 아래와 같이 하나의 특수문자로 이루어진 리스트를 고려하자.\n\n이를 이용하여 아래와 같은 결과를 출력하라.\n\n**hint:** 11번 문제의 코드를 응용할 것\n\n(풀이)\n","srcMarkdownNoYaml":"\n\n> list 고급내용2,3 // 리스트컴프리헨션 //  튜플기본내용\n\n# 강의영상\n\n> <https://youtube.com/playlist?list=PLQqh36zP38-wtrnp6RqmbRVRrYVdualkl>\n\n# list 고급내용 2\n\n## 리스트 원소 추가\n\n(예제) 비어있는 리스트를 만들고 원소 0,1,2를 차례로 추가하여 보자.\n\n(풀이1) `+` 연산이용\n\n(풀이2) `+=` 이용\n\n-   반복되는 문자를 제거하고 연산의 순서를 바꾼다.\n\n(풀이3) 리스트 특수기능 `.append()`를 이용\n\n`-` 아래는 불가능하다.\n\n## `a+[4]`와 `a.append(4)`의 차이점은?\n\n(관찰1)\n\n(관찰2)\n\n비슷해보이지만 굉장히 미묘한 차이가 있음\n\n`a.append(4)`: `a`에 4를 append하라 $\\to$ `a`가 변함\n\n`a+[4]`: `a`와 `[4]`를 연산하라\n\n## 리스트 특수기능\n\n**(append)**\n\n**(clear)**\n\n**(copy)**\n\n**(count)**\n\n**(extend)**\n\n**(index)**\n\n**(insert)**\n\n**(pop)**\n\n**(remove)**\n\n**(reverse)**\n\n**(sort)**\n\n(다른예제들)\n\n## 중첩리스트\n\n`-` 리스트는 리스트를 원소로 받을 수 있으므로 아래와 같이 중첩된\n리스트를 만들 수 있다.\n\n`-` A는 1차원인 벡터가 아니라 2차원인 매트릭스로 이해할 수 있다.\n구체적으로는 아래와 같은 매트릭스로 이해할 수 있다\n\n\\$\n\n\\begin{bmatrix}\n1 & 2 & 3 \\\\ \n4 & 5 & 6 \\\\ \n7 & 8 & 9 \n\\end{bmatrix}\n\n\\$\n\n`-` A에서 (2,1)의 원소를 뽑고싶다 = 4를 뽑고싶다\n\n-   실패\n\n-   성공\n\n`-` 성공의 이유를 분석해보자.\n\n`-` 매트릭스는 아니지만 매트릭스 같음! - 1차원 배열을 다차원 배열로\n확장할 수 있는 기본 아이디어를 제공함\n\n# list 고급내용 3\n\n`-` 리스트컴프리헨션을 다룬다.\n\n## 예비학습1: for문 벼락치기\n\n`-` 리스트 컴프리헨션을 이해하기 전에 for문에 대하여 알아보자.\n\n프로그램안에서 반복해서 무엇인가를 하고싶다 $\\to$ for\n\n(예제) 1,2,3,4의 합을 for문을 이용하여 구해보자.\n\n`-` 궁금: 아래와 같은 코드가 있다고 하자.\n\n``` python\nfor i in ????: \n    print(i)\n```\n\n??? 자리에 올 수 있는건 무엇일까?\n\n-   대답하기 어려움.\n-   일단 list는 가능했음.\n\n(예시1)\n\n(예시2)\n\n(예시3)\n\n(예시4)\n\n(예시5)\n\n(예시6)\n\n## 예비학습2: range\n\n`-` `range(0,10)` 선언해보기\n\n-   이게뭐야?\n\n`-` 도움말 확인하기\n\n-   우리가 아는 범위에서는 모르겠음.. 이런게 있나보다 하고 넘어가야\n    하겠음\n\n`-` 형태변환으로 range(0,10)의 느낌 찾기\n\n-   이게 중요한것임. range(0,10)를 리스트화시키면 \\[0,1,…,9\\] 와 같은\n    리스트를 얻을 수 있음. $\\Rightarrow$ range(0,10)은 \\[0,1,…,9\\] 와\n    “비슷한 것” 임\n\n`-` `range()`의 활용\n\n------------------------------------------------------------------------\n\n## 리스트 컴프리헨션\n\n`-` 예제: $2^0, 2^1, 2^2, 2^3$를 원소로 가지는 리스트를 생성하라.\n\n(풀이1) 직접입력\n\n(풀이2) for문을 이용함\n\n(풀이3) for문을 이용함\n\n(풀이4) for문을 이용함\n\n(풀이5) 리스트컴프리헨션을 이용한 풀이\n\n`-` 리스트컴프리헨션의 문법 암기방법\n\n-   집합에서 조건제시법을 연상\n-   $\\{2^0,2^1,2^2,2^3\\}=\\{2^i: i \\in \\{0,1,2,3\\} \\}$\n\n`-` 리스트컴프리헨션이란?\n\n-   리스트를 매우 효율적으로 만드는 테크닉\n-   for문에 비하여 가지고 있는 장점: (1) 코드가 간결하다 (2) 빠르다\n\n## 리스트 컴프리헨션 연습\n\n`-` 예제1: 리스트 컴프리헨션을 이용하여 아래와 같은 리스트를 만들어라.\n\n(풀이)\n\n`-` 예제2: 리스트컴프리헨션을 이용하여 아래와 같은 리스트를 만들어라.\n\n(풀이)\n\n`-` 예제: 리스트컴프리헨션을 이용하여 아래와 같은 리스트를 만들어라.\n\n(풀이)\n\n(다른풀이) 참고로 for문을 쓰면 좀 복잡해진다.\n\n`-` 예제: 리스트컴프리헨션과 문자열 `'jbnu'`를 이용하여 아래와 같은\n리스트를 만들어라.\n\n(다른풀이) 아래와 같이 풀면 된다는것은 알고 있음\n\n(풀이)\n\n`-` 예제: 리스트컴프리헨션을 이용하여 아래와 같은 리스트를 만들어라.\n\n(풀이)\n\n## 리스트 컴프리헨션과 for문의 미묘한 차이\n\n(경우1)\n\n(경우2)\n\n> 진짜 미묘하게 다르죠?\n\n# 튜플 기본내용\n\n## 리스트 vs 튜플\n\n`-` 컨테이너형타입이라는 점, 그리고 연산 및 인덱싱을 하는 방법은\n리스트와 같음 - 차이점1: \\[\\] 대신에 ()를 사용한다. - 차이점2:\n불변형이다. (원소의 값을 바꿀 수 없음) - 차이점3: 하나의 원소를 선언할\n때는 (1,)와 같이 해야 한다. - 차이점4: 의미가 명확할때는 튜플의 ()를\n생략가능하다.\n\n`-` 컨테이너형이라는 것이 무슨의미?\n\n`-` 불변형이라는 것은 무슨의미?\n\n참고로 a를 튜플이 아니라 리스트로 선언하면 값이 잘 바뀐다.\n\n`-` 하나의 원소로 이루어진 튜플을 만들때는 쉼표를 붙여야 함.\n\n`-` 마지막차이점! 의미가 명확할때 튜플의 괄호는 생략가능하다. (이게\n중요합니다)\n\n의미가 명확할때 생략해야함\n\n## 선언\n\n`-` 소괄호를 이용\n\n`-` 생략가능하다는 점이 포인트\n\n`-` 원소가 하나인 튜플을 만들고 싶다면?\n\n## 연산\n\n`-` 리스트와 동일\n\n## 인덱싱\n\n`-` 리스트와 동일\n\n# HW 0320\n\n`1`. 아래의 코드를 관찰하고, `sum()`의 기능을 유추하라.\n\n(풀이)\n\n생략\n\n`2`. 다음과 같은 리스트를 고려하자.\n\n이를 수식으로 표현하면 아래와 같다.\n\n${\\bf x} = [x_1,\\dots,x_{13}]=[80,60,80,90,55,85,95,100,35,70,75,65,95]$\n\n리스트의 원소중 “$x_i>80$” 의 조건을 만족하는 원소는 모두 몇개인가?\n\n**hint:** 리스트컴프리헨션과 `sum()`함수를 이용할 것\n\n(풀이)\n\n`3`. 다음과 같은 리스트를 고려하자.\n\n이 리스트에서 ‘A’ 혹은 ’B’의 숫자는 모두 몇개인가?\n\n**hint:** 아래를 관찰\n\n(풀이)\n\n`4`. 아래와 같은 리스트가 있다고 하자.\n\n${\\bf x} = [1,2,1,5,6,2,4,7]$\n\n${\\bf y} = [3,2,4,1,2,5,6,7]$\n\n이러한 벡터를 파이썬에서 표현하기 위해서 아래와 같은 리스트를 만들었다고\n하자.\n\n리스트컴프리헨션을 이용하여\n\n$${\\bf z}=[x_1^2+y_1^2, \\dots, x_{8}^2+y_{8}^2]=[x_i^2+y_i^2: \\text{for $i = 1,2,3,\\dots,8$}]$$\n\n와 같은 리스트를 생성하라.\n\n(풀이)\n\n`5`. 아래와 같은 문자열이 있다고 하자.\n\n이 문자열에서 대문자의 수를 count하라. (2022년 파이썬입문 중간고사 1-(5)\n참고)\n\n\n(풀이)\n\n`6`. 리스트컴프리헨션을 이용하여 아래와 같은 리스트를 생성하라. (2022년\n파이썬입문 중간고사 1-(7) 참고)\n\n    ['a',\n     'aa',\n     'aaa',\n     'aaaa',\n     'aaaaa',\n     'aaaaaa',\n     'aaaaaaa',\n     'aaaaaaaa',\n     'aaaaaaaaa',\n     'aaaaaaaaaa'] <- a가 10개있음\n\n\n(풀이)\n\n`7`. 아래와 같은 list가 있다고 하자.\n\n`test_lst`와 리스트컴프리헨션을 이용하여 아래를 출력하는 코드를\n구현하라. (2022년 파이썬입문 중간고사 1-(9) 참고)\n\n(풀이)\n\n`8`. 아래와 같은 list를 생성하라.\n\n``` python\n[1,\n 2,2,\n 3,3,3,\n 4,4,4,4,\n 5,5,5,5,5,\n ...\n 9,9,9,9,9,9,9,9,9] <- 9가 9개 있음 \n```\n\n(풀이1) – 의도한 풀이\n\n(풀이2) – 이걸 의도한건 아니었음…\n\n`9`. 아래와 같은 리스트를 관찰하라.\n\n이러한 리스트를 아래와 같은 리스트로 변환하는 코드를 작성하라.\n\n**hint: string의 `.replace()`기능과 리스트 컴프리헨션의 응용**\n\n\n(풀이)\n\n`10`. 아래와 같은 문자열을 고려하라.\n\n띄어쓰기를 제거하는 코드를 구현하라. 즉 출력결과가 아래와 같도록 만드는\n코드를 구현하라.\n\n**hint**: 아래코드 관찰\n\n(풀이)\n\n`11`. 아래의 코드를 관찰하라.\n\nChatGPT를 이용하여 이 코드가 의미하는 내용을 유추하라.\n\n문자열 사이를 연결해주는 기능?\n\n(풀이)\n\n`.join()`은 문자열의 메서드 중 하나로, 문자열 리스트를 하나의 문자열로 결합하는 데 사용됩니다.\n\n`12`. 아래와 같이 하나의 특수문자로 이루어진 리스트를 고려하자.\n\n이를 이용하여 아래와 같은 결과를 출력하라.\n\n**hint:** 11번 문제의 코드를 응용할 것\n\n(풀이)\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"toc":true,"output-file":"2023-03-20-3wk-1.out.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.315","theme":"cosmo","code-copy":true,"title-block-banner":true,"title":"03wk-1: 파이썬의 자료형 (4) -- O","author":"jiyunLim","date":"09/18/2023","categories":["파이썬의 자료형"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}