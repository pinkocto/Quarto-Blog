{"title":"04wk-1: 파이썬의 자료형 (6) -- O","markdown":{"yaml":{"title":"04wk-1: 파이썬의 자료형 (6) -- O","author":"jiyunLim","date":"09/20/2023","categories":["파이썬의 자료형"]},"headingText":"강의영상","containsRefs":false,"markdown":"\n\n> 인덱싱고급 (스트라이딩), if문이 포함된 컴프리헨션\n\n\n> youtube:\n> <https://youtube.com/playlist?list=PLQqh36zP38-yH_F4QH9ldMXyEDA5wWXx_>\n\n> Blog: <https://guebin.github.io/PP2023/posts/01_PythonBasic/2023-03-27-4wk-1.html>\n\n-   강의 마지막에 집합 설명하려다가 다 못했습니다. 집합은 다음시간에\n    다시 설명하겠습니다. 위 영상에서 집합설명한 부분은 무시하셔도\n    됩니다.\n\n# 잡기술 (하지만 유용해)\n\n## 인덱싱고급 (스트라이딩)\n\n`-` 스트라이딩 \\[start:end:step\\]\n\n`-` 생략\n\n`-` 예제1: 짝수/홀수 원소 추출\n\n아래와 같은 문자열이 있다고 하자.\n\n`index = 0,2,4, ...` 에 해당하는 원소를 출력하라.\n\n`index = 1,4,7 ...` 에 해당하는 원소를 출력하라.\n\n`-` 예제2: 세로로..\n\n------------------------------------------------------------------------\n\n(예제2를 위한 예비학습) 문자열에서 `\\n`을 출력하면 출력시 줄바꿈이\n일어난다.\n\n예비학습 끝\n\n------------------------------------------------------------------------\n\n아래와 같은 문자열이 있다고 하자.\n\n위 문자열을 세로로 읽는 코드를 작성하라. (9칸씩 점프하면서 읽으면 된다)\n\n(풀이)\n\n`-` step = -1 이면?\n\n`-` 스트라이딩으로 `step = -1` 옵션 주기 vs 리스트의 `.reverse()` 메소드\n이용하기\n\n관찰1: reverse 메소드는 리스트 자체를 변화시킴\n\n관찰2: \\[::-1\\]는 리스트는 변화시키지 않음\n\n`-` -step은 쓰기 까다롭다.\n\n(예제) 처음과 끝을 생략하지 않고 아래와 동일한 효과를 주는 코드를 만들어\n보자.\n\n(풀이)\n\n결국 lst\\[?:?:-1\\]의 꼴에서 적당히 ?의 값을 채우면 된다. –\\> 어려워\n\n| None |  a  |  b  |  c  |  d  |  e  |  f  |  g  |  h  | None |\n|:----:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:----:|\n|  ?   |  0  |  1  |  2  |  3  |  4  |  5  |  6  |  7  |  8   |\n|  -9  | -8  | -7  | -6  | -5  | -4  | -3  | -2  | -1  |  ?   |\n\n## 컴프리헨션 고급 (if문이 포함된 컴프리헨션)\n\n`-` 예제: 제곱수중에서 12로 나누어 떨어지는 수만 원소로 가지는 리스트를\n만들고 싶다.\n\n-   제곱수: 1,4,9,16,25,36, …\n-   12로 나누어 떨어지는 수: 36, …\n\n(예비학습1)\n\n(예비학습2)\n\n(예비학습3) if문\n\n(풀이1) - 비어있는 리스트를 만들고 $\\to$ for문 + if문\n\n(풀이2) - if문이 포함된 리스트컴프리헨션\n\n## 함수고급 (if문이 포함된 리턴)\n\n`-` 홀수/짝수를 판별하는 함수 만들기 1\n\n(사용)\n\n`-` 홀수/짝수를 판별하는 함수 만들기 2\n\n(사용)\n\n## len함수\n\n`-` 0차원 자료형은 len함수가 동작하지 않음\n\n> note: 이것이 어떠한 수학적인 의미를 가지거나 0차원의 본질적진리를\n> 뜻하는 것은 안미. R에서는 1,3.14,TRUE의 길이가 1로 존재함.\n\n`-` 1차원 자료형은 len함수가 동작\n\n`-` 길이가 1인 1차원 자료형과 0차원 자료형은 다른것임\n\n`-` 길이가 0인 1차원 자료형도 존재함\n\n# 딕셔너리 기본내용\n\n## intro: str, list, tuple 정리\n\n`-` str, list, tuple은 모두 시퀀스형이라는 공통점이 있다. $\\to$ 원소의\n위치번호로 인덱싱이 가능\n\n`-` str, list, tuple은 차이점도 존재함. 잠깐 정리해보자.\n\n***시퀀스형의 카테고리***\n\n-   컨테니어형: list, tuple\n-   균일형: str\n-   가변형: list\n-   불변형: tuple, str\n\n***표로 정리하면***\n\n|        | 컨테니어형 | 균일형 |\n|:------:|:----------:|:------:|\n| 가변형 |    list    |   .    |\n| 불변형 |   tuple    |  str   |\n\n`-` 시퀀스형이 아닌 1차원 자료형도 있을까? 원소의 위치번호로 인덱싱이\n불가능한 자료형\n\n`-` 왜 이런게 필요할까?\n\n-   벡터에서 원소를 뽑는것은 정보의 모임에서 정보를 검색하는 것과 같다.\n-   정보를 `순서`대로 나열한뒤에 그 `순서`를 이용하여 검색하는 방법은\n    유용하다.\n-   하지만 경우에 따라서는 `키워드`를 기억해서 그 `키워드`를 바탕으로\n    정보에 접근하는 방법이 유용할 수 있다.\n\n***카카오톡 대화내용검색***\n\n(상황1) `오늘아침`에 와이프가 `뭔가`를 카톡으로 부탁했었음. 그런데 그\n`뭔가`가 기억안남.\n\n(상황2) `개강전에` 동료교수와 함께 `저녁약속`을 카톡으로 잡았었음.\n그런데 그게 언제인지 기억안남.\n\n(상황3) `오늘아침` 동료교수와 함께 `점심약속`을 카톡으로 잡았었음.\n그런데 그 장소가 기억나지 않음.\n\n`-` 순서대로 정리된 자료를 검색할때는 시퀀스형이 유리하다. 그런데\n키워드로 검색하고 싶을 경우는 딕셔너리 타입이 유리하다.\n\n## 선언\n\n`-` 방법1: 가장 일반적\n\n`-` 방법2: `dict()` 이용\n\n`-` 방법3: 중첩된 리스트를 만든 뒤에 형태변환\n\n`-` 방법4: 중첩된 튜플을 만든 뒤에 형태변환\n\n## 원소추출\n\n`-` 원소의 위치로 추출할 수 없고, key로 추출해야 한다.\n\nguebin의 점수를 추출하고 싶다면?\n\n`-` 만약에 dict가 아니라 list로 정보를 저장했다면?\n\n(예제) 아래와 같은 리스트에서 guebin의 점수를 추출하고 싶다면?\n\n(풀이1)\n\n(풀이2) – 진짜 최악\n\n(풀이3) – 덜 최악\n\n`-` ’guebin’의 점수를 추출하는 코드 비교\n\n## 원소추가, 변경, 삭제\n\n`-` 원소에 접근: guebin의 점수 출력\n\n`-` 추가: hynn학생의 점수를 추가\n\n`-` 변경: hanni의 점수를 변경\n\n`-` 삭제\n\n(방법1)\n\n(방법2)\n\n`-` 참고로 리스트였다면 이러한 삭제작업역시 비효율적이었을 것임\n\nguebin의 점수를 삭제하려면?\n\n## 연산\n\n`-` 하나있어요..\n\n`-` in은 사실 다른자료형도 가능했음\n\n(관찰1)\n\n(관찰2)\n\n(관찰3)\n\n`-` in연산자가 dict형에 사용되면 key를 기준으로 True, False를 판단한다.\n\n## 딕셔너리 특수기능\n\n**(pop)**\n\n**(get)**\n\n아래와 같은 기능\n\n미묘한 차이점이 존재함\n\n**(keys,values,items)**\n\n`-` .keys()는 딕셔너리의 키를 리턴한다.\n\n`-` .values()는 딕셔너리의 값들을 리턴한다.\n\n`-` .items()는 딕셔너리의 (키,값)을 리턴한다.\n\n## for문과 dict ($\\star$)\n\n(예시1)\n\n-   딕셔너리 그자체도 for문에 넣을 수 있다.\n-   k에는 value가 삭제되어 들어간다. (즉 key만)\n-   결과를 보면 dct 대신에 dct.keys()와 list(dct)를 넣었을때와 결과가\n    같다.\n\n> Note: list(dct) 하면 key만 리턴된다.\n\n(예시2)\n\n(예시3)\n\n(예시4)\n\n(예시5) – {}의 중간고사 점수는 {}점 입니다.\n\n# 딕셔너리 고급내용 (1) ($\\star$)\n\n## dict에서 key혹은 value만 뽑아내기\n\n`-` 예제: 아래의 dict에서 key만 뽑아내고 싶다.\n\n(풀이1)\n\n(풀이2)\n\n(풀이3)\n\n(풀이4)\n\n`-` 예제: 아래의 dict에서 value만 뽑아내고 싶다.\n\n(풀이1)\n\n(풀이2)\n\n(풀이3)\n\n(풀이4)\n\n## 바꿔치기 (1)\n\n`-` 예제1: 아래와 같은 리스트가 있다고 하자.\n\n아래의 규칙에 의하여 lst의 각 원소의 값을 바꾸고 싶다고 하자. 이를\n구현하는 코드를 작성하라.\n\n| 변환전 |   변환후    |\n|:------:|:-----------:|\n|  ‘a’   | \\[1,0,0,0\\] |\n|  ‘b’   | \\[0,1,0,0\\] |\n|  ‘c’   | \\[0,0,1,0\\] |\n|  ‘d’   | \\[0,0,0,1\\] |\n\nhint: 아래의 dct를 이용할 것\n\n(풀이)\n\n`-` 예제2: 예제1을 역변환하라.\n\n(풀이)\n\n## 바꿔치기 (2)\n\n`-` 예제1: 아래와 같은 리스트를 고려하자.\n\n다음의 맵핑규칙에 따라서 위의 리스트의 원소를 바꾸어라.\n\n|  변환전  | 변환후 |\n|:--------:|:------:|\n|   딸기   |  과일  |\n|   사과   |  과일  |\n|  바나나  |  과일  |\n| 오토바이 |  탈것  |\n|  자동차  |  탈것  |\n|   버스   |  탈것  |\n|   기차   |  탈것  |\n\n(풀이)\n\n# HW 0327 (1)\n\n`ssh코드`: 1-2\n\n아래의 문자열을 고려하자.\n\n`1`. 이 문자열에서 `index = 0,2,4,6,8,...` 에 해당하는 원소를 출력하는\n코드를 작성하라. (2022-파이썬입문 중간고사 1-(2) 참고)\n\n(풀이)\n\n`2`. 위 문자열을 뒤집은 문자열을 구하는 코드를 구현하라.\n(2022-파이썬입문 중간고사 1-(4) 참고)\n\n(풀이)\n\n------------------------------------------------------------------------\n\n`파이썬 프로그래밍 시험성적`: 3-4\n\n아래와 같은 dictionary가 있다고 가정하자.\n\n여기에서 ‘202212377’ 등은 학번을, att는 출석점수, rep는 레포트점수,\nmid는 중간고사 점수, fin은 기말고사 점수를 의미한다.\n\n`3`. 학생들의 학번을 아래와 같은 방식으로 출력하는 코드를 작성하라.\n\n```\n# 출력예시\n\n['2022-12377',\n '2022-12473',\n '2022-12310',\n '2022-12460',\n '2022-12320',\n '2022-12329',\n '2022-12408',\n '2022-12319',\n '2022-12348',\n '2022-12306',\n '2022-12308',\n '2022-12366',\n '2022-12367',\n '2022-12461']\n```\n\n(풀이)\n\n`4`. 출석점수가 70점 이상인(`>=70`) 학생들의 학번을 출력하는 코드를\n작성하라. (2022-파이썬입문 중간고사 2-(3) 참고)\n\n```\n# 출력예시\n['2022-12473',\n '2022-12320',\n '2022-12329',\n '2022-12348',\n '2022-12306',\n '2022-12366',\n '2022-12367']\n```\n\n(풀이)\n\n------------------------------------------------------------------------\n\n`Oxford-III`: 5–10 //\n[reference](https://www.robots.ox.ac.uk/~vgg/data/pets/)\n\n아래는 이미지 파일명들이 저장된 string을 불러오는 코드이다.\n\ntxt의 출력 일부를 나타내면 아래와 같다.\n\n``` default\n'Abyssinian_1.jpg\\nAbyssinian_10.jpg\\nAbyssinian_100.jpg\\nAbyssinian_100.mat\\nAbyssinian_101.jpg\\nAbyssinian_101.mat\\nAbyssinian_102.jpg\\nAbyssinian_102.mat\\nAbyssinian_103.jpg\\nAbyssinian_104.jpg\\nAbyssinian_105.jpg\\nAbyssinian_106.jpg\\nAbyssinian_107.jpg\\nAbyssinian_108.jpg\\nAbyssinian_109.jpg\\nAbyssinian_11.jpg\\nAbyssinian_110.jpg\\nAbyssinian_111.jpg\\nAbyssinian_112.jpg\\nAbyssinian_113.jpg\\nAbyssinian_114.jpg\\nAbyssinian_115.jpg\\nAbyssinian_116.jpg\\nAbyssinian_117.jpg\\nAbyssinian_118.jpg\\nAbyssinian_119.jpg\\nAbyssinian_12.jpg\\nAbyssinian_120.jpg\\nAbyssinian_121.jpg\\nAbyssinian_122.jpg\\nAbyssinian_123.jpg\\nAbyssinian_124.jpg\\nAbyssinian_125.jpg\\nAbyssinian_126.jpg\\nAbyssinian_127.jpg\\nAbyssinian_128.jpg\\nAbyssinian_129.jpg\\nAbyssinian_13.jpg\\nAbyssinian_130.jpg\\nAbyssinian_131.jpg\\nAbyssinian_132.jpg\\n ....... \n```\n\n`5`. 각 파일명은 `\\n`으로 구분되어있다. 위의 스트링을 분해하여 아래와\n같은 리스트를 생성하고 `fname_list`에 저장하라.\n\n``` python\n# fname_list 의 출력결과는 아래와 같아야 한다. \n['Abyssinian_1.jpg','Abyssinian_10.jpg', ... ,'yorkshire_terrier_98.jpg', 'yorkshire_terrier_99.jpg']\n```\n\n(풀이)\n\n`6`. 각 이미지파일명은 아래와 같은 규칙으로 저장되어 있다.\n\n-   파일명의 첫글자가 대문자이면 고양이를 의미하고 첫글자가 소문자이면\n    강아지를 의미한다.\n-   `_` 이전의 영문명은 고양이 혹은 강아지의 종(breed)을 의미한다.\n\n이미지 파일명이 입력으로 오면 강아지인지 고양이인지 판단하여 ‘cat’ or\n’dog’를 리턴하는 함수 `f`를 구현하라.\n\n(함수사용예시)\n\n(풀이)\n\n`7`. 5의 결과로 나온 `fname_list`를 입력으로 하고 리스트의 각 원소가\n고양이를 의미하는 그림인지 강아지를 의미하는 그림인지 나타내는 리스트를\n만들어라.\n\n``` python\n## 입력예시 \n['Abyssinian_1.jpg','Abyssinian_10.jpg',...,'yorkshire_terrier_98.jpg', 'yorkshire_terrier_99.jpg']\n\n## 출력예시\n['cat', 'cat', ... , 'dog', 'dog']\n```\n\n(풀이)\n\n`8`. 강아지 그림과 고양이 그림이 각각 몇 장씩 포함되어 있는지 파악하는\n코드를 구현하라.\n\n(풀이)\n\n`9`. 포메라니안 종의 그림이 몇장있는지 파악하는 코드를 구현하라.\n\n**hint:** 포메라니안 그림은 파일명에 ‘pomeranian’ 을 포함한다.\n\n(풀이)\n\n`10`. 아래의 `dct`는 포메라니안과 사모예드가 각각 몇장씩 포함되어있는지\n정리하기 위해 임시로 정리한 dictionary이다. 각 종이 몇 장씩\n포함되어있는지 구하여 `dct`를 수정하라.\n\n예를들어 포메라니안과 사모에예드의 그림이 각각 200장씩 있다면 아래와\n같이 딕셔너리를 수정해야한다.\n\n(풀이)\n\n# HW 0327 (2)\n\n`1`. 아래와 같은 맵핑을 고려하자.\n\n| 문자 | 숫자 |\n|:----:|:----:|\n|  a   |  1   |\n|  b   |  0   |\n\n이를 딕셔너리로 표현하면 아래와 같다.\n\n위 규칙에 따라서 아래의 리스트의 원소를 문자로 각각 변환하라.\n\n``` python\n# 출력은 아래와 같아야 한다. \n['b', 'a', 'b', 'a', 'b', 'a', 'b', 'b', 'b', 'b', 'a', 'a', 'b', 'a', 'b']\n```\n\n(풀이)\n\n`2`. 아래와 같은 맵핑을 고려하자.\n\n|     월     |   의미   |\n|:----------:|:--------:|\n|    1,2     | 겨울방학 |\n|  3,4,5,6   |  1학기   |\n|    7,8     | 여름방학 |\n| 9,10,11,12 |  2학기   |\n\n이러한 규칙에 맞게 아래의 리스트를 적절한 문자열로 변환하라.\n\n``` python\n## 출력은 아래와 같아야 한다. \n['겨울방학', '겨울방학', '겨울방학', '1학기', '1학기', '1학기', '1학기', '여름방학', '여름방학', '2학기', '2학기', '2학기', '2학기', '2학기']\n```\n\n(풀이)\n\n`합성변환` 3-5.\n\n아래와 같은 맵핑을 고려하자.\n\n(규칙1)\n\n|   문자   | 숫자 |\n|:--------:|:----:|\n|  바나나  |  0   |\n|   사과   |  1   |\n| 오토바이 |  2   |\n|  자동차  |  3   |\n|  자전거  |  4   |\n\n(규칙2)\n\n|  아이템  | 카테고리 |\n|:--------:|:--------:|\n|  바나나  |   과일   |\n|   사과   |   과일   |\n| 오토바이 |   탈것   |\n|  자동차  |   탈것   |\n|  자전거  |   탈것   |\n\n각각의 규칙을 나타내는 딕셔너리는 아래와 같이 선언되어있다고 하자.\n\n`3`. 규칙1를 이용하여 아래와 같은 리스트를 변환하는 함수를 구현하고 그\n함수를 `f`라 선언하라.\n\n``` python\n# 입력 \n[0,1,0,1,4]\n\n# 출력 \n['바나나', '사과', '바나나', '사과', '자전거']\n```\n\n(사용예시)\n\n```python\nf([0,1,0,1,4])\n```\n\n(풀이)\n\n`4`. 규칙2를 이용하여 아래와 같이 리스트를 변환하는 함수를 구현하고 그\n함수를 `g`라고 선언하라.\n\n``` python\n# 입력 \n['바나나','바나나','바나나','자동차']\n\n# 출력 \n['과일','과일','과일','탈것']\n```\n\n(사용예시)\n\n(풀이)\n\n`5`. 규칙1-2를 이용하여 아래와 같은 숫자로 이루어진 입력을 ‘과일’,\n‘탈것’ 중 하나로 바꾸는 코드를 구현하라.\n\n``` python\n# 입력 \n[0,1,0,1,3,4,2,2,3,4,1,0]\n\n# 출력 \n['과일', '과일', '과일', '과일', '탈것', '탈것', '탈것', '탈것', '탈것', '탈것', '과일', '과일']\n```\n\n**hint** $g(f(x))$ 를 이용하라.\n\n(풀이)\n","srcMarkdownNoYaml":"\n\n> 인덱싱고급 (스트라이딩), if문이 포함된 컴프리헨션\n\n# 강의영상\n\n> youtube:\n> <https://youtube.com/playlist?list=PLQqh36zP38-yH_F4QH9ldMXyEDA5wWXx_>\n\n> Blog: <https://guebin.github.io/PP2023/posts/01_PythonBasic/2023-03-27-4wk-1.html>\n\n-   강의 마지막에 집합 설명하려다가 다 못했습니다. 집합은 다음시간에\n    다시 설명하겠습니다. 위 영상에서 집합설명한 부분은 무시하셔도\n    됩니다.\n\n# 잡기술 (하지만 유용해)\n\n## 인덱싱고급 (스트라이딩)\n\n`-` 스트라이딩 \\[start:end:step\\]\n\n`-` 생략\n\n`-` 예제1: 짝수/홀수 원소 추출\n\n아래와 같은 문자열이 있다고 하자.\n\n`index = 0,2,4, ...` 에 해당하는 원소를 출력하라.\n\n`index = 1,4,7 ...` 에 해당하는 원소를 출력하라.\n\n`-` 예제2: 세로로..\n\n------------------------------------------------------------------------\n\n(예제2를 위한 예비학습) 문자열에서 `\\n`을 출력하면 출력시 줄바꿈이\n일어난다.\n\n예비학습 끝\n\n------------------------------------------------------------------------\n\n아래와 같은 문자열이 있다고 하자.\n\n위 문자열을 세로로 읽는 코드를 작성하라. (9칸씩 점프하면서 읽으면 된다)\n\n(풀이)\n\n`-` step = -1 이면?\n\n`-` 스트라이딩으로 `step = -1` 옵션 주기 vs 리스트의 `.reverse()` 메소드\n이용하기\n\n관찰1: reverse 메소드는 리스트 자체를 변화시킴\n\n관찰2: \\[::-1\\]는 리스트는 변화시키지 않음\n\n`-` -step은 쓰기 까다롭다.\n\n(예제) 처음과 끝을 생략하지 않고 아래와 동일한 효과를 주는 코드를 만들어\n보자.\n\n(풀이)\n\n결국 lst\\[?:?:-1\\]의 꼴에서 적당히 ?의 값을 채우면 된다. –\\> 어려워\n\n| None |  a  |  b  |  c  |  d  |  e  |  f  |  g  |  h  | None |\n|:----:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:----:|\n|  ?   |  0  |  1  |  2  |  3  |  4  |  5  |  6  |  7  |  8   |\n|  -9  | -8  | -7  | -6  | -5  | -4  | -3  | -2  | -1  |  ?   |\n\n## 컴프리헨션 고급 (if문이 포함된 컴프리헨션)\n\n`-` 예제: 제곱수중에서 12로 나누어 떨어지는 수만 원소로 가지는 리스트를\n만들고 싶다.\n\n-   제곱수: 1,4,9,16,25,36, …\n-   12로 나누어 떨어지는 수: 36, …\n\n(예비학습1)\n\n(예비학습2)\n\n(예비학습3) if문\n\n(풀이1) - 비어있는 리스트를 만들고 $\\to$ for문 + if문\n\n(풀이2) - if문이 포함된 리스트컴프리헨션\n\n## 함수고급 (if문이 포함된 리턴)\n\n`-` 홀수/짝수를 판별하는 함수 만들기 1\n\n(사용)\n\n`-` 홀수/짝수를 판별하는 함수 만들기 2\n\n(사용)\n\n## len함수\n\n`-` 0차원 자료형은 len함수가 동작하지 않음\n\n> note: 이것이 어떠한 수학적인 의미를 가지거나 0차원의 본질적진리를\n> 뜻하는 것은 안미. R에서는 1,3.14,TRUE의 길이가 1로 존재함.\n\n`-` 1차원 자료형은 len함수가 동작\n\n`-` 길이가 1인 1차원 자료형과 0차원 자료형은 다른것임\n\n`-` 길이가 0인 1차원 자료형도 존재함\n\n# 딕셔너리 기본내용\n\n## intro: str, list, tuple 정리\n\n`-` str, list, tuple은 모두 시퀀스형이라는 공통점이 있다. $\\to$ 원소의\n위치번호로 인덱싱이 가능\n\n`-` str, list, tuple은 차이점도 존재함. 잠깐 정리해보자.\n\n***시퀀스형의 카테고리***\n\n-   컨테니어형: list, tuple\n-   균일형: str\n-   가변형: list\n-   불변형: tuple, str\n\n***표로 정리하면***\n\n|        | 컨테니어형 | 균일형 |\n|:------:|:----------:|:------:|\n| 가변형 |    list    |   .    |\n| 불변형 |   tuple    |  str   |\n\n`-` 시퀀스형이 아닌 1차원 자료형도 있을까? 원소의 위치번호로 인덱싱이\n불가능한 자료형\n\n`-` 왜 이런게 필요할까?\n\n-   벡터에서 원소를 뽑는것은 정보의 모임에서 정보를 검색하는 것과 같다.\n-   정보를 `순서`대로 나열한뒤에 그 `순서`를 이용하여 검색하는 방법은\n    유용하다.\n-   하지만 경우에 따라서는 `키워드`를 기억해서 그 `키워드`를 바탕으로\n    정보에 접근하는 방법이 유용할 수 있다.\n\n***카카오톡 대화내용검색***\n\n(상황1) `오늘아침`에 와이프가 `뭔가`를 카톡으로 부탁했었음. 그런데 그\n`뭔가`가 기억안남.\n\n(상황2) `개강전에` 동료교수와 함께 `저녁약속`을 카톡으로 잡았었음.\n그런데 그게 언제인지 기억안남.\n\n(상황3) `오늘아침` 동료교수와 함께 `점심약속`을 카톡으로 잡았었음.\n그런데 그 장소가 기억나지 않음.\n\n`-` 순서대로 정리된 자료를 검색할때는 시퀀스형이 유리하다. 그런데\n키워드로 검색하고 싶을 경우는 딕셔너리 타입이 유리하다.\n\n## 선언\n\n`-` 방법1: 가장 일반적\n\n`-` 방법2: `dict()` 이용\n\n`-` 방법3: 중첩된 리스트를 만든 뒤에 형태변환\n\n`-` 방법4: 중첩된 튜플을 만든 뒤에 형태변환\n\n## 원소추출\n\n`-` 원소의 위치로 추출할 수 없고, key로 추출해야 한다.\n\nguebin의 점수를 추출하고 싶다면?\n\n`-` 만약에 dict가 아니라 list로 정보를 저장했다면?\n\n(예제) 아래와 같은 리스트에서 guebin의 점수를 추출하고 싶다면?\n\n(풀이1)\n\n(풀이2) – 진짜 최악\n\n(풀이3) – 덜 최악\n\n`-` ’guebin’의 점수를 추출하는 코드 비교\n\n## 원소추가, 변경, 삭제\n\n`-` 원소에 접근: guebin의 점수 출력\n\n`-` 추가: hynn학생의 점수를 추가\n\n`-` 변경: hanni의 점수를 변경\n\n`-` 삭제\n\n(방법1)\n\n(방법2)\n\n`-` 참고로 리스트였다면 이러한 삭제작업역시 비효율적이었을 것임\n\nguebin의 점수를 삭제하려면?\n\n## 연산\n\n`-` 하나있어요..\n\n`-` in은 사실 다른자료형도 가능했음\n\n(관찰1)\n\n(관찰2)\n\n(관찰3)\n\n`-` in연산자가 dict형에 사용되면 key를 기준으로 True, False를 판단한다.\n\n## 딕셔너리 특수기능\n\n**(pop)**\n\n**(get)**\n\n아래와 같은 기능\n\n미묘한 차이점이 존재함\n\n**(keys,values,items)**\n\n`-` .keys()는 딕셔너리의 키를 리턴한다.\n\n`-` .values()는 딕셔너리의 값들을 리턴한다.\n\n`-` .items()는 딕셔너리의 (키,값)을 리턴한다.\n\n## for문과 dict ($\\star$)\n\n(예시1)\n\n-   딕셔너리 그자체도 for문에 넣을 수 있다.\n-   k에는 value가 삭제되어 들어간다. (즉 key만)\n-   결과를 보면 dct 대신에 dct.keys()와 list(dct)를 넣었을때와 결과가\n    같다.\n\n> Note: list(dct) 하면 key만 리턴된다.\n\n(예시2)\n\n(예시3)\n\n(예시4)\n\n(예시5) – {}의 중간고사 점수는 {}점 입니다.\n\n# 딕셔너리 고급내용 (1) ($\\star$)\n\n## dict에서 key혹은 value만 뽑아내기\n\n`-` 예제: 아래의 dict에서 key만 뽑아내고 싶다.\n\n(풀이1)\n\n(풀이2)\n\n(풀이3)\n\n(풀이4)\n\n`-` 예제: 아래의 dict에서 value만 뽑아내고 싶다.\n\n(풀이1)\n\n(풀이2)\n\n(풀이3)\n\n(풀이4)\n\n## 바꿔치기 (1)\n\n`-` 예제1: 아래와 같은 리스트가 있다고 하자.\n\n아래의 규칙에 의하여 lst의 각 원소의 값을 바꾸고 싶다고 하자. 이를\n구현하는 코드를 작성하라.\n\n| 변환전 |   변환후    |\n|:------:|:-----------:|\n|  ‘a’   | \\[1,0,0,0\\] |\n|  ‘b’   | \\[0,1,0,0\\] |\n|  ‘c’   | \\[0,0,1,0\\] |\n|  ‘d’   | \\[0,0,0,1\\] |\n\nhint: 아래의 dct를 이용할 것\n\n(풀이)\n\n`-` 예제2: 예제1을 역변환하라.\n\n(풀이)\n\n## 바꿔치기 (2)\n\n`-` 예제1: 아래와 같은 리스트를 고려하자.\n\n다음의 맵핑규칙에 따라서 위의 리스트의 원소를 바꾸어라.\n\n|  변환전  | 변환후 |\n|:--------:|:------:|\n|   딸기   |  과일  |\n|   사과   |  과일  |\n|  바나나  |  과일  |\n| 오토바이 |  탈것  |\n|  자동차  |  탈것  |\n|   버스   |  탈것  |\n|   기차   |  탈것  |\n\n(풀이)\n\n# HW 0327 (1)\n\n`ssh코드`: 1-2\n\n아래의 문자열을 고려하자.\n\n`1`. 이 문자열에서 `index = 0,2,4,6,8,...` 에 해당하는 원소를 출력하는\n코드를 작성하라. (2022-파이썬입문 중간고사 1-(2) 참고)\n\n(풀이)\n\n`2`. 위 문자열을 뒤집은 문자열을 구하는 코드를 구현하라.\n(2022-파이썬입문 중간고사 1-(4) 참고)\n\n(풀이)\n\n------------------------------------------------------------------------\n\n`파이썬 프로그래밍 시험성적`: 3-4\n\n아래와 같은 dictionary가 있다고 가정하자.\n\n여기에서 ‘202212377’ 등은 학번을, att는 출석점수, rep는 레포트점수,\nmid는 중간고사 점수, fin은 기말고사 점수를 의미한다.\n\n`3`. 학생들의 학번을 아래와 같은 방식으로 출력하는 코드를 작성하라.\n\n```\n# 출력예시\n\n['2022-12377',\n '2022-12473',\n '2022-12310',\n '2022-12460',\n '2022-12320',\n '2022-12329',\n '2022-12408',\n '2022-12319',\n '2022-12348',\n '2022-12306',\n '2022-12308',\n '2022-12366',\n '2022-12367',\n '2022-12461']\n```\n\n(풀이)\n\n`4`. 출석점수가 70점 이상인(`>=70`) 학생들의 학번을 출력하는 코드를\n작성하라. (2022-파이썬입문 중간고사 2-(3) 참고)\n\n```\n# 출력예시\n['2022-12473',\n '2022-12320',\n '2022-12329',\n '2022-12348',\n '2022-12306',\n '2022-12366',\n '2022-12367']\n```\n\n(풀이)\n\n------------------------------------------------------------------------\n\n`Oxford-III`: 5–10 //\n[reference](https://www.robots.ox.ac.uk/~vgg/data/pets/)\n\n아래는 이미지 파일명들이 저장된 string을 불러오는 코드이다.\n\ntxt의 출력 일부를 나타내면 아래와 같다.\n\n``` default\n'Abyssinian_1.jpg\\nAbyssinian_10.jpg\\nAbyssinian_100.jpg\\nAbyssinian_100.mat\\nAbyssinian_101.jpg\\nAbyssinian_101.mat\\nAbyssinian_102.jpg\\nAbyssinian_102.mat\\nAbyssinian_103.jpg\\nAbyssinian_104.jpg\\nAbyssinian_105.jpg\\nAbyssinian_106.jpg\\nAbyssinian_107.jpg\\nAbyssinian_108.jpg\\nAbyssinian_109.jpg\\nAbyssinian_11.jpg\\nAbyssinian_110.jpg\\nAbyssinian_111.jpg\\nAbyssinian_112.jpg\\nAbyssinian_113.jpg\\nAbyssinian_114.jpg\\nAbyssinian_115.jpg\\nAbyssinian_116.jpg\\nAbyssinian_117.jpg\\nAbyssinian_118.jpg\\nAbyssinian_119.jpg\\nAbyssinian_12.jpg\\nAbyssinian_120.jpg\\nAbyssinian_121.jpg\\nAbyssinian_122.jpg\\nAbyssinian_123.jpg\\nAbyssinian_124.jpg\\nAbyssinian_125.jpg\\nAbyssinian_126.jpg\\nAbyssinian_127.jpg\\nAbyssinian_128.jpg\\nAbyssinian_129.jpg\\nAbyssinian_13.jpg\\nAbyssinian_130.jpg\\nAbyssinian_131.jpg\\nAbyssinian_132.jpg\\n ....... \n```\n\n`5`. 각 파일명은 `\\n`으로 구분되어있다. 위의 스트링을 분해하여 아래와\n같은 리스트를 생성하고 `fname_list`에 저장하라.\n\n``` python\n# fname_list 의 출력결과는 아래와 같아야 한다. \n['Abyssinian_1.jpg','Abyssinian_10.jpg', ... ,'yorkshire_terrier_98.jpg', 'yorkshire_terrier_99.jpg']\n```\n\n(풀이)\n\n`6`. 각 이미지파일명은 아래와 같은 규칙으로 저장되어 있다.\n\n-   파일명의 첫글자가 대문자이면 고양이를 의미하고 첫글자가 소문자이면\n    강아지를 의미한다.\n-   `_` 이전의 영문명은 고양이 혹은 강아지의 종(breed)을 의미한다.\n\n이미지 파일명이 입력으로 오면 강아지인지 고양이인지 판단하여 ‘cat’ or\n’dog’를 리턴하는 함수 `f`를 구현하라.\n\n(함수사용예시)\n\n(풀이)\n\n`7`. 5의 결과로 나온 `fname_list`를 입력으로 하고 리스트의 각 원소가\n고양이를 의미하는 그림인지 강아지를 의미하는 그림인지 나타내는 리스트를\n만들어라.\n\n``` python\n## 입력예시 \n['Abyssinian_1.jpg','Abyssinian_10.jpg',...,'yorkshire_terrier_98.jpg', 'yorkshire_terrier_99.jpg']\n\n## 출력예시\n['cat', 'cat', ... , 'dog', 'dog']\n```\n\n(풀이)\n\n`8`. 강아지 그림과 고양이 그림이 각각 몇 장씩 포함되어 있는지 파악하는\n코드를 구현하라.\n\n(풀이)\n\n`9`. 포메라니안 종의 그림이 몇장있는지 파악하는 코드를 구현하라.\n\n**hint:** 포메라니안 그림은 파일명에 ‘pomeranian’ 을 포함한다.\n\n(풀이)\n\n`10`. 아래의 `dct`는 포메라니안과 사모예드가 각각 몇장씩 포함되어있는지\n정리하기 위해 임시로 정리한 dictionary이다. 각 종이 몇 장씩\n포함되어있는지 구하여 `dct`를 수정하라.\n\n예를들어 포메라니안과 사모에예드의 그림이 각각 200장씩 있다면 아래와\n같이 딕셔너리를 수정해야한다.\n\n(풀이)\n\n# HW 0327 (2)\n\n`1`. 아래와 같은 맵핑을 고려하자.\n\n| 문자 | 숫자 |\n|:----:|:----:|\n|  a   |  1   |\n|  b   |  0   |\n\n이를 딕셔너리로 표현하면 아래와 같다.\n\n위 규칙에 따라서 아래의 리스트의 원소를 문자로 각각 변환하라.\n\n``` python\n# 출력은 아래와 같아야 한다. \n['b', 'a', 'b', 'a', 'b', 'a', 'b', 'b', 'b', 'b', 'a', 'a', 'b', 'a', 'b']\n```\n\n(풀이)\n\n`2`. 아래와 같은 맵핑을 고려하자.\n\n|     월     |   의미   |\n|:----------:|:--------:|\n|    1,2     | 겨울방학 |\n|  3,4,5,6   |  1학기   |\n|    7,8     | 여름방학 |\n| 9,10,11,12 |  2학기   |\n\n이러한 규칙에 맞게 아래의 리스트를 적절한 문자열로 변환하라.\n\n``` python\n## 출력은 아래와 같아야 한다. \n['겨울방학', '겨울방학', '겨울방학', '1학기', '1학기', '1학기', '1학기', '여름방학', '여름방학', '2학기', '2학기', '2학기', '2학기', '2학기']\n```\n\n(풀이)\n\n`합성변환` 3-5.\n\n아래와 같은 맵핑을 고려하자.\n\n(규칙1)\n\n|   문자   | 숫자 |\n|:--------:|:----:|\n|  바나나  |  0   |\n|   사과   |  1   |\n| 오토바이 |  2   |\n|  자동차  |  3   |\n|  자전거  |  4   |\n\n(규칙2)\n\n|  아이템  | 카테고리 |\n|:--------:|:--------:|\n|  바나나  |   과일   |\n|   사과   |   과일   |\n| 오토바이 |   탈것   |\n|  자동차  |   탈것   |\n|  자전거  |   탈것   |\n\n각각의 규칙을 나타내는 딕셔너리는 아래와 같이 선언되어있다고 하자.\n\n`3`. 규칙1를 이용하여 아래와 같은 리스트를 변환하는 함수를 구현하고 그\n함수를 `f`라 선언하라.\n\n``` python\n# 입력 \n[0,1,0,1,4]\n\n# 출력 \n['바나나', '사과', '바나나', '사과', '자전거']\n```\n\n(사용예시)\n\n```python\nf([0,1,0,1,4])\n```\n\n(풀이)\n\n`4`. 규칙2를 이용하여 아래와 같이 리스트를 변환하는 함수를 구현하고 그\n함수를 `g`라고 선언하라.\n\n``` python\n# 입력 \n['바나나','바나나','바나나','자동차']\n\n# 출력 \n['과일','과일','과일','탈것']\n```\n\n(사용예시)\n\n(풀이)\n\n`5`. 규칙1-2를 이용하여 아래와 같은 숫자로 이루어진 입력을 ‘과일’,\n‘탈것’ 중 하나로 바꾸는 코드를 구현하라.\n\n``` python\n# 입력 \n[0,1,0,1,3,4,2,2,3,4,1,0]\n\n# 출력 \n['과일', '과일', '과일', '과일', '탈것', '탈것', '탈것', '탈것', '탈것', '탈것', '과일', '과일']\n```\n\n**hint** $g(f(x))$ 를 이용하라.\n\n(풀이)\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"toc":true,"output-file":"2023-03-27-4wk-1.out.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.315","theme":"cosmo","code-copy":true,"title-block-banner":true,"title":"04wk-1: 파이썬의 자료형 (6) -- O","author":"jiyunLim","date":"09/20/2023","categories":["파이썬의 자료형"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}