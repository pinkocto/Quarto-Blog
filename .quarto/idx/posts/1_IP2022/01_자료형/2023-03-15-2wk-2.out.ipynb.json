{"title":"02wk-2: 파이썬의 자료형 (3) -- O","markdown":{"yaml":{"title":"02wk-2: 파이썬의 자료형 (3) -- O","author":"JiyunLim","date":"09/17/2023","categories":["파이썬의 자료형"]},"headingText":"강의영상","containsRefs":false,"markdown":"\n\n> list 기본/고급 내용, 문자열메서드 format, replace\n\n\n> <https://youtube.com/playlist?list=PLQqh36zP38-yYY4_T4ZDcUeMLxFJma2B3>\n\n# list 기본내용\n\n## 선언\n\n`-` 리스트의 선언\n\n`-` 비어있는 리스트의 선언\n\n## 연산\n\n`-` 더하기연산\n\n-   우리의 예상과 다른 결과가 나옴 $\\to$ 파이썬은 R처럼 자체적으로 좋은\n    계산기능을 내장하고 있지 않음.\n\n`-` 브로드캐스팅과 같이 R에서는 당연히 가능했던 기능을 사용할 수 없음.\n\n`-` 뺄셈은 정의되지 않음\n\n`-` 곱하기는 정의가능\n\n`-` 나눗셈은 정의되지 않음\n\n`-` 더하기와 곱하기는 원소의 추가와 반복추가를 의미하지만 그렇다고 해서\n뺄셈과 나눗셈이 원소의 삭제를 의미하는것은 아님\n\n`-` 더하기와 곱하기가 원소의 추가와 반복추가를 의미하여 편리할때도\n있긴하지만, 우리는 산술적인 `+`, `*` 를 원하는 경우도 있다. 이럴 경우는\n어떻게 할 수 있을까?\n\n(예제)\n\na+b = \\[4,6\\] 이 되도록 하려면?\n\n(풀이1)\n\n풀이가 가능한 이유? a,b는 리스트이지만 a\\[0\\], a\\[1\\], b\\[0\\], b\\[1\\] 은\n각각 인트형임. 인트형은 + 연산이 가능했음.\n\n(풀이2)\n\nnumpy 패키지 (파이썬의 여러 수치연산들을 담당하는 라이브러리)\n\n-   이러한 벡터연산은 누구나 필요로 하는 연산임.\n-   내가 아니더라도 누군가가 프로그램화 해놓았을 것임.\n-   그 누군가가 자신이 만든 코드를 잘 정리하여 무료로 배포했을 수도\n    있음. (패키지를 배포한다고 표현)\n-   그 패키지를 우리는 가져와서 설치한뒤 사용하기만 하면된다.\n\n패키지를 설치하는 방법\n\n-   `!pip install numpy` \\# 최신버전을 설치함\n-   `!conda install -c conda-forge numpy -y` \\# 안전한 버전을 설치함\n\n설치된 패키지를 사용하는 방법\n\n-   `import numpy` 한뒤에 `numpy.??`로 기능을 사용\n-   `import numpy as np` 한뒤에 `np.??`로 기능을 사용\n\n여러가지 연산 가능 (마치 R처럼 쓸 수 있음)\n\n(풀이3)\n\n## 인덱싱\n\n`-` str형과 동일한 방식\n\n# list 고급내용 1\n\n## 콘테이너형 객체\n\n`-` 리스트의 원소는 int, float 따위만 가능한 것이 아니다. (리스트는\n컨테이너형 객체이므로)\n\n각 원소의 타입을 알아보자.\n\n`-` str은 컨테이너형이 아니다.\n\n-   str의 모든 원소는 문자임\n\n## 가변객체\n\n`-` 리스트는 원소를 수정할 수 있다. (리스트는 가변객체이므로)\n\n`-` 원소수정은 당연한 기능같은데 이것이 불가능한 경우도 있다.\n\n(가능한경우)\n\n(불가능한경우)\n\n## 리스트의 원소 삭제\n\n(예제1) del을 이용한 원소삭제\n\n아래와 같이 문자로 된 리스트를 선언하자.\n\n***사실 더 쉽게 선언할 수 있음***\n\n첫번째 원소를 삭제하고 싶다면?\n\n이 상태에서 다시 첫번째 원소를 삭제한다면?\n\n(예제2) pop을 이용한 원소삭제\n\n# HW 0315\n\n`1`. 길이가 0인 리스트를 만들어라. (비어있는 리스트를 만들어라)\n\n(풀이1)\n\n(풀이2)\n\n`2`. 다음의 실행값 중 가장 큰 숫자가 나오는 보기를 골라라. (에러가 나는\n코드는 정답에서 제외함)\n\n``` python\n(a) len(3.14) \n(b) len([3.14]) \n(c) len('3.14') \n```\n\n(풀이)\n\n따라서 답은 (c)\n\n`3`. 아래의 예제를 관찰하라.\n\n이 예제를 바탕으로 문자열에 포함된 `.format()`함수의 기능을 유추하라.\n그리고 아래의 결과를 확인하라.\n\n``` python\nstring = '전북대학교 학생엠티가 {}월{}일-{}월{}일 완주 곶감펜션에서 있다고 합니다. 자세한 일정 등은 다시 공지하겠습니다.' \nstring.format(3,24,3,25)\n```\n\nChatGPT를 활용하여 `.format()`함수의 기능을 학습하라.\n\n(풀이)\n\n\n::: {.callout-note}\n## format() 문자열메서드\n\n.format()은 Python에서 문자열을 포맷하는 메서드입니다. 이 메서드를 사용하면 문자열에 변수나 값을 삽입하거나 원하는 형식으로 문자열을 조작할 수 있습니다. Python 3 이상에서는 f-문자열을 사용하여 문자열을 포맷하는 것이 더 선호되는 방법이지만, 여전히 .format()을 사용하는 경우도 많이 있습니다.\n:::\n\n\n\n\n\n`-` 문자열 메서드?\n\n문자열 메서드(String method)는 특정 문자열 객체에 대해 호출되어 문자열을 조작하고 변환하는 함수와 같은 기능을 수행하는 함수입니다. 이러한 메서드는 문자열을 처리하고 원하는 형식으로 변경하는 데 사용됩니다. Python과 다른 프로그래밍 언어에서 문자열 메서드는 일반적으로 문자열을 다루는 다양한 작업을 수행하는 데 도움을 주는데 사용됩니다.\n\nPython의 문자열 메서드 중 일부 예시는 다음과 같습니다:\n\n```python\nstr.upper() # 문자열을 모두 대문자로 변환합니다.\nstr.lower() # 문자열을 모두 소문자로 변환합니다.\nstr.capitalize() # 문자열의 첫 글자를 대문자로 만듭니다.\nstr.strip() # 문자열 앞뒤의 공백을 제거합니다.\nstr.split() # 문자열을 지정한 구분자를 기준으로 나눕니다.\nstr.replace(old, new) # 문자열 내에서 지정한 부분 문자열을 다른 문자열로 대체합니다.\nstr.find(substring) # 문자열 내에서 부분 문자열의 인덱스를 찾습니다.\nstr.startswith(prefix) # 문자열이 특정 접두사로 시작하는지 확인합니다.\nstr.endswith(suffix) # 문자열이 특정 접미사로 끝나는지 확인합니다.\n```\n\n`4`. 아래의 예제를 관찰하라.\n\n-  'g'가 'u'로 바뀌었네? / 지정된 문자열을  다른 문자열로 바꾸는 기능?\n\n이 예제를 바탕으로 문자열의 `.replace()` 기능을 유추하라. 유추한 기능을\nchatGPT로 확인하라.\n\n(풀이)\n\n\n::: {.callout-note}\n## replace() 문자열메서드\n\nreplace()는 Python 문자열 메서드 중 하나로, 문자열 내에서 지정된 문자열 또는 패턴을 다른 문자열로 대체하는 기능을 수행합니다. 이 메서드는 원래 문자열을 변경하지 않고 대체된 새 문자열을 반환합니다.\n:::\n\n`5`. 리스트자료형의 `+`와 `*` 연산을 이용하여 아래와 같은 list를\n생성하라.\n\n**hint:** 아래의 코드를 관찰해보세요\n\n(풀이)\n\n`6`. 넘파이를 이용하여 아래와 같은 결과가 나오도록 코드가 작성하라.\n\n$$\\begin{bmatrix}\n1 \\\\\n2 \n\\end{bmatrix} + \\begin{bmatrix}\n11 \\\\\n22 \n\\end{bmatrix} = \n\\begin{bmatrix}\n12 \\\\\n24\n\\end{bmatrix}$$\n\n(풀이)\n\n> 풀이1,2 모두 좋음\n\n`7`. 아래와 같은 벡터 ${\\boldsymbol a}$가 있다고 하자.\n\n$$\\boldsymbol{a}=\n\\begin{bmatrix}\n12 \\\\\n24\n\\end{bmatrix}$$\n\n넘파이를 이용하여 아래의 결과가 나오게 하는 코드를 작성하라.\n\n$$2\\boldsymbol{a}=\n\\begin{bmatrix}\n24 \\\\\n48\n\\end{bmatrix}$$\n\n(풀이)\n","srcMarkdownNoYaml":"\n\n> list 기본/고급 내용, 문자열메서드 format, replace\n\n# 강의영상\n\n> <https://youtube.com/playlist?list=PLQqh36zP38-yYY4_T4ZDcUeMLxFJma2B3>\n\n# list 기본내용\n\n## 선언\n\n`-` 리스트의 선언\n\n`-` 비어있는 리스트의 선언\n\n## 연산\n\n`-` 더하기연산\n\n-   우리의 예상과 다른 결과가 나옴 $\\to$ 파이썬은 R처럼 자체적으로 좋은\n    계산기능을 내장하고 있지 않음.\n\n`-` 브로드캐스팅과 같이 R에서는 당연히 가능했던 기능을 사용할 수 없음.\n\n`-` 뺄셈은 정의되지 않음\n\n`-` 곱하기는 정의가능\n\n`-` 나눗셈은 정의되지 않음\n\n`-` 더하기와 곱하기는 원소의 추가와 반복추가를 의미하지만 그렇다고 해서\n뺄셈과 나눗셈이 원소의 삭제를 의미하는것은 아님\n\n`-` 더하기와 곱하기가 원소의 추가와 반복추가를 의미하여 편리할때도\n있긴하지만, 우리는 산술적인 `+`, `*` 를 원하는 경우도 있다. 이럴 경우는\n어떻게 할 수 있을까?\n\n(예제)\n\na+b = \\[4,6\\] 이 되도록 하려면?\n\n(풀이1)\n\n풀이가 가능한 이유? a,b는 리스트이지만 a\\[0\\], a\\[1\\], b\\[0\\], b\\[1\\] 은\n각각 인트형임. 인트형은 + 연산이 가능했음.\n\n(풀이2)\n\nnumpy 패키지 (파이썬의 여러 수치연산들을 담당하는 라이브러리)\n\n-   이러한 벡터연산은 누구나 필요로 하는 연산임.\n-   내가 아니더라도 누군가가 프로그램화 해놓았을 것임.\n-   그 누군가가 자신이 만든 코드를 잘 정리하여 무료로 배포했을 수도\n    있음. (패키지를 배포한다고 표현)\n-   그 패키지를 우리는 가져와서 설치한뒤 사용하기만 하면된다.\n\n패키지를 설치하는 방법\n\n-   `!pip install numpy` \\# 최신버전을 설치함\n-   `!conda install -c conda-forge numpy -y` \\# 안전한 버전을 설치함\n\n설치된 패키지를 사용하는 방법\n\n-   `import numpy` 한뒤에 `numpy.??`로 기능을 사용\n-   `import numpy as np` 한뒤에 `np.??`로 기능을 사용\n\n여러가지 연산 가능 (마치 R처럼 쓸 수 있음)\n\n(풀이3)\n\n## 인덱싱\n\n`-` str형과 동일한 방식\n\n# list 고급내용 1\n\n## 콘테이너형 객체\n\n`-` 리스트의 원소는 int, float 따위만 가능한 것이 아니다. (리스트는\n컨테이너형 객체이므로)\n\n각 원소의 타입을 알아보자.\n\n`-` str은 컨테이너형이 아니다.\n\n-   str의 모든 원소는 문자임\n\n## 가변객체\n\n`-` 리스트는 원소를 수정할 수 있다. (리스트는 가변객체이므로)\n\n`-` 원소수정은 당연한 기능같은데 이것이 불가능한 경우도 있다.\n\n(가능한경우)\n\n(불가능한경우)\n\n## 리스트의 원소 삭제\n\n(예제1) del을 이용한 원소삭제\n\n아래와 같이 문자로 된 리스트를 선언하자.\n\n***사실 더 쉽게 선언할 수 있음***\n\n첫번째 원소를 삭제하고 싶다면?\n\n이 상태에서 다시 첫번째 원소를 삭제한다면?\n\n(예제2) pop을 이용한 원소삭제\n\n# HW 0315\n\n`1`. 길이가 0인 리스트를 만들어라. (비어있는 리스트를 만들어라)\n\n(풀이1)\n\n(풀이2)\n\n`2`. 다음의 실행값 중 가장 큰 숫자가 나오는 보기를 골라라. (에러가 나는\n코드는 정답에서 제외함)\n\n``` python\n(a) len(3.14) \n(b) len([3.14]) \n(c) len('3.14') \n```\n\n(풀이)\n\n따라서 답은 (c)\n\n`3`. 아래의 예제를 관찰하라.\n\n이 예제를 바탕으로 문자열에 포함된 `.format()`함수의 기능을 유추하라.\n그리고 아래의 결과를 확인하라.\n\n``` python\nstring = '전북대학교 학생엠티가 {}월{}일-{}월{}일 완주 곶감펜션에서 있다고 합니다. 자세한 일정 등은 다시 공지하겠습니다.' \nstring.format(3,24,3,25)\n```\n\nChatGPT를 활용하여 `.format()`함수의 기능을 학습하라.\n\n(풀이)\n\n\n::: {.callout-note}\n## format() 문자열메서드\n\n.format()은 Python에서 문자열을 포맷하는 메서드입니다. 이 메서드를 사용하면 문자열에 변수나 값을 삽입하거나 원하는 형식으로 문자열을 조작할 수 있습니다. Python 3 이상에서는 f-문자열을 사용하여 문자열을 포맷하는 것이 더 선호되는 방법이지만, 여전히 .format()을 사용하는 경우도 많이 있습니다.\n:::\n\n\n\n\n\n`-` 문자열 메서드?\n\n문자열 메서드(String method)는 특정 문자열 객체에 대해 호출되어 문자열을 조작하고 변환하는 함수와 같은 기능을 수행하는 함수입니다. 이러한 메서드는 문자열을 처리하고 원하는 형식으로 변경하는 데 사용됩니다. Python과 다른 프로그래밍 언어에서 문자열 메서드는 일반적으로 문자열을 다루는 다양한 작업을 수행하는 데 도움을 주는데 사용됩니다.\n\nPython의 문자열 메서드 중 일부 예시는 다음과 같습니다:\n\n```python\nstr.upper() # 문자열을 모두 대문자로 변환합니다.\nstr.lower() # 문자열을 모두 소문자로 변환합니다.\nstr.capitalize() # 문자열의 첫 글자를 대문자로 만듭니다.\nstr.strip() # 문자열 앞뒤의 공백을 제거합니다.\nstr.split() # 문자열을 지정한 구분자를 기준으로 나눕니다.\nstr.replace(old, new) # 문자열 내에서 지정한 부분 문자열을 다른 문자열로 대체합니다.\nstr.find(substring) # 문자열 내에서 부분 문자열의 인덱스를 찾습니다.\nstr.startswith(prefix) # 문자열이 특정 접두사로 시작하는지 확인합니다.\nstr.endswith(suffix) # 문자열이 특정 접미사로 끝나는지 확인합니다.\n```\n\n`4`. 아래의 예제를 관찰하라.\n\n-  'g'가 'u'로 바뀌었네? / 지정된 문자열을  다른 문자열로 바꾸는 기능?\n\n이 예제를 바탕으로 문자열의 `.replace()` 기능을 유추하라. 유추한 기능을\nchatGPT로 확인하라.\n\n(풀이)\n\n\n::: {.callout-note}\n## replace() 문자열메서드\n\nreplace()는 Python 문자열 메서드 중 하나로, 문자열 내에서 지정된 문자열 또는 패턴을 다른 문자열로 대체하는 기능을 수행합니다. 이 메서드는 원래 문자열을 변경하지 않고 대체된 새 문자열을 반환합니다.\n:::\n\n`5`. 리스트자료형의 `+`와 `*` 연산을 이용하여 아래와 같은 list를\n생성하라.\n\n**hint:** 아래의 코드를 관찰해보세요\n\n(풀이)\n\n`6`. 넘파이를 이용하여 아래와 같은 결과가 나오도록 코드가 작성하라.\n\n$$\\begin{bmatrix}\n1 \\\\\n2 \n\\end{bmatrix} + \\begin{bmatrix}\n11 \\\\\n22 \n\\end{bmatrix} = \n\\begin{bmatrix}\n12 \\\\\n24\n\\end{bmatrix}$$\n\n(풀이)\n\n> 풀이1,2 모두 좋음\n\n`7`. 아래와 같은 벡터 ${\\boldsymbol a}$가 있다고 하자.\n\n$$\\boldsymbol{a}=\n\\begin{bmatrix}\n12 \\\\\n24\n\\end{bmatrix}$$\n\n넘파이를 이용하여 아래의 결과가 나오게 하는 코드를 작성하라.\n\n$$2\\boldsymbol{a}=\n\\begin{bmatrix}\n24 \\\\\n48\n\\end{bmatrix}$$\n\n(풀이)\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"toc":true,"output-file":"2023-03-15-2wk-2.out.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.315","theme":"cosmo","code-copy":true,"title-block-banner":true,"title":"02wk-2: 파이썬의 자료형 (3) -- O","author":"JiyunLim","date":"09/17/2023","categories":["파이썬의 자료형"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}