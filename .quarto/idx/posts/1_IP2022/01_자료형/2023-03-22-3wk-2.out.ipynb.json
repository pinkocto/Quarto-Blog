{"title":"03wk-2: 파이썬의 자료형 (5) -- O","markdown":{"yaml":{"title":"03wk-2: 파이썬의 자료형 (5) -- O"},"headingText":"튜플 고급내용","containsRefs":false,"markdown":"\n\n\n\n\n최규빈  \n2023-03-22\n\n<a href=\"https://colab.research.google.com/github/guebin/PP2023/blob/main/posts/01_PythonBasic/2023-03-22-3wk-2.ipynb\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" style=\"text-align: left\"></a>\n\n\n## 튜플을 왜 쓸까? (1)\n\n`-` 책의 설명 (이 설명이 꼭 파이썬에 한정되는 것은 아님. 모든 언어에\n존재하는 불변형 객체에 적용가능한 설명)\n\n-   실수방지\n-   빠르다, 다중작업에 유리하다, 여러사람과 작업하기에 유리하다,\n    깊은복사/얕은복사시 원하지않는 오류(side effect이라고 함)를 방지할\n    수 있다, 메모리관리에도 유리함…\n-   느낌: 불변형은 기능제한이 있는데 가볍고 빠른, 가변형은 기능은\n    풍부하지만 약간 느리고 무거운 느낌임 (불변형:라면사리, 가변형:라면)\n\n## 슬기로운 튜플사용 ($\\star\\star\\star\\star\\star$)\n\n`-` 예제: 여러변수를 동시에 출력하고 싶을 경우 (다중출력?)\n\n변수를 아래와 같이 선언하였다고 하자.\n\n\n\n선언된 값을 확인하려면?\n\n튜플을 이용하면?\n\n`-` 예제: 다중할당1 (여러개의 변수를 동시에 선언하고 싶을 경우)\n\n`-` 예제: 다중할당2, 위도와 경도\n\n`-` 잠깐만: 다중할당은 꼭 튜플에서만 가능한가?\n\n그건 아니다…\n\n튜플과 같이 사용하면 가독성이 극대화 (그래서 다중할당은 거의 튜플과\n세트로 사용함)\n\n`-` 예제: 임시변수 사용없이 두 변수의 값을 교환\n\n`-` 예제: for문과 튜플\n\n`-` 예제: for문과 튜플, dummy variable `_`\n\n`-` 예제: 튜플과 언패킹연산자 `*`\n\n(관찰)\n\n그러고 보니까..\n\n``` python\nhead1,head2, body, tail1,tail2,tail3  = (1, 2, [3,4,5,6,7], 8, 9, 10)\nhead1,head2, *body, tail1,tail2,tail3   = (1, 2, 3,4,5,6,7, 8, 9, 10)\n```\n\n이렇다는 거잖아?\n\n`*`를 붙이면 1차원 자료구조가 풀린다..?\n\n## 튜플을 왜 쓸까? (2)\n\n`-` 책의 설명 (이 설명이 꼭 파이썬에 한정되는 것은 아님. 모든 언어에\n존재하는 불변형 객체에 적용가능한 설명)\n\n-   실수방지\n-   빠르다, 다중작업에 유리하다, 여러사람과 작업하기에 유리하다,\n    깊은복사/얕은복사시 원하지않는 오류(side effect이라고 함)를 방지할\n    수 있다, 메모리관리에도 유리함…\n-   느낌: 불변형은 기능제한이 있는데 가볍고 빠른, 가변형은 기능은\n    풍부하지만 약간 느리고 무거운 느낌임 (불변형:라면사리, 가변형:라면)\n\n`-` 내 설명: 소괄화 생략할 수 있어서 쓰는거야\n\n-   튜플의 장점은 소괄호의 생략에 있음 (이것은 파이썬과 줄리아만 가능)\n-   소괄호생략 + 언패킹 $\\Rightarrow$ 엄청난 가독성\n-   컴공과 사람들 의견: 튜플 + 언패킹 $\\Rightarrow$ 엄청난 가독성\n    $\\Rightarrow$ 충격 $\\Rightarrow$ “파이썬 편하더라고요..”\n\n`-` 의문: 왜 튜플만 괄호를 생략할 수 있지?\n\n답이 없는 문제인데 답을 해보겠습니다.\n\n-   튜플을 먼저 만들고, 괄호를 생략하는 문법을 추가한것은 아닐것임\n-   원래 괄호없이 컴마만 대충찍어서 선언가능한 아주간단한 타입의\n    벡터형을 만들고 싶었을 것임.\n-   왜? 괄호없는 벡터를 만들고, 언패킹을 사용하면 여러가지 구문들이\n    엄청나게 간단해짐.\n-   컴마컴마로 선언하는 벡터는 한 두번 쓰고 버리는 경우가 많으며 대부분\n    이름도 필요없음 $\\to$ 원소에 접근해서 sorting하여 순서를 바꾸고\n    싶다던가 원소를 추가할 이유가 없음 $\\to$ 비싼 가변형으로 만들 이유가\n    없다는 것..\n-   우리가 필요한 것: 데이터가 벡터의 형태로 모여있기만 하면 된다!\n\n# HW: 03-22 (2)\n\n`1`. 길이가 1인 튜플을 만들어 자신의 학번을 저장하라. 길이가 1인 튜플을\n만들어 자신의 영문이름을 저장하라. 두 튜플을 + 연산자로 합쳐아래와 같은\n출력결과를 얻어라. 최종 결과는 예를들면 아래와 같아야 한다.\n\n(풀이)\n\n`2-5`. 아래는 파이썬프로그래밍 수강생들의 학번, 이름, 출석점수,\n과제점수, 중간고사점수, 기말고사점수를 저장한 중첩리스트이다.\n\n`2`. 파이썬프로그래밍 수강생의 수는 모두 몇명인가?\n\n(풀이)\n\n`3`. 전북대학교 지침에 따라 출석점수가 7보다 작은 학생은 (즉\n`출석점수 < 7` 일 경우) F학점을 부여하게 되어있다. 이 기준에 따르면 F를\n받는 학생은 모두 몇명인가?\n\n(풀이)\n\n`4`. 파이썬프로그래밍 수업의 경우 `출석+레포트 < 21` 일 경우 F학점을\n부여한다고 한다. 이 기준에 따르면 F를 받는 학생은 모두 몇명인가?\n\n(풀이)\n\n`5`. 리스트의 정렬순서를 \\[학번, 이름, …, 기말고사점수\\] 가 아니라\n\\[이름, 학번, … , 기말고사점수\\] 와 같이 되도록 변경하는 코드를\n작성하라.\n\n(출력예시)\n\n`6`. 아래의 코드를 관찰하라.\n\n이 코드를 바탕으로 split의 기능을 유추하라. (ChatGPT 활용해도 무방함)\n\n()안의 공백 / 문자열?을 기준으로 문자열이 나눠지는 것 같음.\n\n\n(풀이)\n\n\n\"split\"은 문자열을 특정 구분자(delimiter)를 기준으로 나누는 기능을 제공하는 프로그래밍 언어나 문자열 처리 도구에서 사용되는 함수 또는 메서드입니다. 이 기능을 사용하면 하나의 문자열을 여러 부분 문자열로 나눌 수 있으며, 이를 통해 데이터를 분리하거나 처리하는 데 도움이 됩니다.\n\n`7`. 6의 실행결과를 되돌리는 코드를 작성하라. 즉\n\n와 같은 리스트를 아래의 string으로 바꾸는 코드를 작성하라.\n\n**hint:** join을 이용할 것\n\n(풀이)\n\n------------------------------------------------------------------------\n\n다음은 인터넷에서 긁어온 어떠한 텍스트이다.\n\n`8`. text는 총 몇개의 문장으로 이루어져 있는가?\n\n**hint:** 이 텍스트의 문장은 모두 `.`로 끝난다.\n\n(풀이)\n\n`9`. 각 문장은 몇개의 단어로 이루어져 있는가?\n\n**hint:** 각 단어는 공백으로 구분된다.\n\n\n(풀이)\n\n`10`. `100`이라는 단어가 포함된 문장은 모두 몇 개 인가?\n\n**hint:** 아래의 코드를 관찰\n\n(풀이)\n","srcMarkdownNoYaml":"\n\n\n\n\n최규빈  \n2023-03-22\n\n<a href=\"https://colab.research.google.com/github/guebin/PP2023/blob/main/posts/01_PythonBasic/2023-03-22-3wk-2.ipynb\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" style=\"text-align: left\"></a>\n\n# 튜플 고급내용\n\n## 튜플을 왜 쓸까? (1)\n\n`-` 책의 설명 (이 설명이 꼭 파이썬에 한정되는 것은 아님. 모든 언어에\n존재하는 불변형 객체에 적용가능한 설명)\n\n-   실수방지\n-   빠르다, 다중작업에 유리하다, 여러사람과 작업하기에 유리하다,\n    깊은복사/얕은복사시 원하지않는 오류(side effect이라고 함)를 방지할\n    수 있다, 메모리관리에도 유리함…\n-   느낌: 불변형은 기능제한이 있는데 가볍고 빠른, 가변형은 기능은\n    풍부하지만 약간 느리고 무거운 느낌임 (불변형:라면사리, 가변형:라면)\n\n## 슬기로운 튜플사용 ($\\star\\star\\star\\star\\star$)\n\n`-` 예제: 여러변수를 동시에 출력하고 싶을 경우 (다중출력?)\n\n변수를 아래와 같이 선언하였다고 하자.\n\n\n\n선언된 값을 확인하려면?\n\n튜플을 이용하면?\n\n`-` 예제: 다중할당1 (여러개의 변수를 동시에 선언하고 싶을 경우)\n\n`-` 예제: 다중할당2, 위도와 경도\n\n`-` 잠깐만: 다중할당은 꼭 튜플에서만 가능한가?\n\n그건 아니다…\n\n튜플과 같이 사용하면 가독성이 극대화 (그래서 다중할당은 거의 튜플과\n세트로 사용함)\n\n`-` 예제: 임시변수 사용없이 두 변수의 값을 교환\n\n`-` 예제: for문과 튜플\n\n`-` 예제: for문과 튜플, dummy variable `_`\n\n`-` 예제: 튜플과 언패킹연산자 `*`\n\n(관찰)\n\n그러고 보니까..\n\n``` python\nhead1,head2, body, tail1,tail2,tail3  = (1, 2, [3,4,5,6,7], 8, 9, 10)\nhead1,head2, *body, tail1,tail2,tail3   = (1, 2, 3,4,5,6,7, 8, 9, 10)\n```\n\n이렇다는 거잖아?\n\n`*`를 붙이면 1차원 자료구조가 풀린다..?\n\n## 튜플을 왜 쓸까? (2)\n\n`-` 책의 설명 (이 설명이 꼭 파이썬에 한정되는 것은 아님. 모든 언어에\n존재하는 불변형 객체에 적용가능한 설명)\n\n-   실수방지\n-   빠르다, 다중작업에 유리하다, 여러사람과 작업하기에 유리하다,\n    깊은복사/얕은복사시 원하지않는 오류(side effect이라고 함)를 방지할\n    수 있다, 메모리관리에도 유리함…\n-   느낌: 불변형은 기능제한이 있는데 가볍고 빠른, 가변형은 기능은\n    풍부하지만 약간 느리고 무거운 느낌임 (불변형:라면사리, 가변형:라면)\n\n`-` 내 설명: 소괄화 생략할 수 있어서 쓰는거야\n\n-   튜플의 장점은 소괄호의 생략에 있음 (이것은 파이썬과 줄리아만 가능)\n-   소괄호생략 + 언패킹 $\\Rightarrow$ 엄청난 가독성\n-   컴공과 사람들 의견: 튜플 + 언패킹 $\\Rightarrow$ 엄청난 가독성\n    $\\Rightarrow$ 충격 $\\Rightarrow$ “파이썬 편하더라고요..”\n\n`-` 의문: 왜 튜플만 괄호를 생략할 수 있지?\n\n답이 없는 문제인데 답을 해보겠습니다.\n\n-   튜플을 먼저 만들고, 괄호를 생략하는 문법을 추가한것은 아닐것임\n-   원래 괄호없이 컴마만 대충찍어서 선언가능한 아주간단한 타입의\n    벡터형을 만들고 싶었을 것임.\n-   왜? 괄호없는 벡터를 만들고, 언패킹을 사용하면 여러가지 구문들이\n    엄청나게 간단해짐.\n-   컴마컴마로 선언하는 벡터는 한 두번 쓰고 버리는 경우가 많으며 대부분\n    이름도 필요없음 $\\to$ 원소에 접근해서 sorting하여 순서를 바꾸고\n    싶다던가 원소를 추가할 이유가 없음 $\\to$ 비싼 가변형으로 만들 이유가\n    없다는 것..\n-   우리가 필요한 것: 데이터가 벡터의 형태로 모여있기만 하면 된다!\n\n# HW: 03-22 (2)\n\n`1`. 길이가 1인 튜플을 만들어 자신의 학번을 저장하라. 길이가 1인 튜플을\n만들어 자신의 영문이름을 저장하라. 두 튜플을 + 연산자로 합쳐아래와 같은\n출력결과를 얻어라. 최종 결과는 예를들면 아래와 같아야 한다.\n\n(풀이)\n\n`2-5`. 아래는 파이썬프로그래밍 수강생들의 학번, 이름, 출석점수,\n과제점수, 중간고사점수, 기말고사점수를 저장한 중첩리스트이다.\n\n`2`. 파이썬프로그래밍 수강생의 수는 모두 몇명인가?\n\n(풀이)\n\n`3`. 전북대학교 지침에 따라 출석점수가 7보다 작은 학생은 (즉\n`출석점수 < 7` 일 경우) F학점을 부여하게 되어있다. 이 기준에 따르면 F를\n받는 학생은 모두 몇명인가?\n\n(풀이)\n\n`4`. 파이썬프로그래밍 수업의 경우 `출석+레포트 < 21` 일 경우 F학점을\n부여한다고 한다. 이 기준에 따르면 F를 받는 학생은 모두 몇명인가?\n\n(풀이)\n\n`5`. 리스트의 정렬순서를 \\[학번, 이름, …, 기말고사점수\\] 가 아니라\n\\[이름, 학번, … , 기말고사점수\\] 와 같이 되도록 변경하는 코드를\n작성하라.\n\n(출력예시)\n\n`6`. 아래의 코드를 관찰하라.\n\n이 코드를 바탕으로 split의 기능을 유추하라. (ChatGPT 활용해도 무방함)\n\n()안의 공백 / 문자열?을 기준으로 문자열이 나눠지는 것 같음.\n\n\n(풀이)\n\n\n\"split\"은 문자열을 특정 구분자(delimiter)를 기준으로 나누는 기능을 제공하는 프로그래밍 언어나 문자열 처리 도구에서 사용되는 함수 또는 메서드입니다. 이 기능을 사용하면 하나의 문자열을 여러 부분 문자열로 나눌 수 있으며, 이를 통해 데이터를 분리하거나 처리하는 데 도움이 됩니다.\n\n`7`. 6의 실행결과를 되돌리는 코드를 작성하라. 즉\n\n와 같은 리스트를 아래의 string으로 바꾸는 코드를 작성하라.\n\n**hint:** join을 이용할 것\n\n(풀이)\n\n------------------------------------------------------------------------\n\n다음은 인터넷에서 긁어온 어떠한 텍스트이다.\n\n`8`. text는 총 몇개의 문장으로 이루어져 있는가?\n\n**hint:** 이 텍스트의 문장은 모두 `.`로 끝난다.\n\n(풀이)\n\n`9`. 각 문장은 몇개의 단어로 이루어져 있는가?\n\n**hint:** 각 단어는 공백으로 구분된다.\n\n\n(풀이)\n\n`10`. `100`이라는 단어가 포함된 문장은 모두 몇 개 인가?\n\n**hint:** 아래의 코드를 관찰\n\n(풀이)\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"toc":true,"output-file":"2023-03-22-3wk-2.out.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.315","theme":"cosmo","code-copy":true,"title-block-banner":true,"title":"03wk-2: 파이썬의 자료형 (5) -- O"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}