{"title":"**[IP2022]** class 8단계","markdown":{"yaml":{"title":"**[IP2022]** class 8단계","author":"jiyun Lim","date":"02/23/2023","categories":["class","Python"]},"headingText":"클래스공부 8단계","containsRefs":false,"markdown":"\n\n\n> for문 복습, iterable object\n\n## import\n\n## for문의 복습\n\n`-` 아래와 같은 예제들을 관찰하여 for문을 복습하자.\n\n(예제1)\n\n(예제2)\n\n(예제3)\n\n(예제4)\n\n- 5라고 출력되어야 하지 않나?\n\n`-` 의문1:\n\n```python\nfor i in ???:\n    print(i)\n```\n\n에서 ???자리에 올 수 있는 것이 무엇일까?\n\n(예제5)\n\n***상황1***\n\n***상황2***\n\n칼럼이름들이 나오는 것 같음 $\\to$ 확인해보자.\n\n`-` 의문2: for의 출력결과는 어떻게 예측할 수 있을까?\n\n## for문의 동작원리\n\n`-` 의문1의 해결: 아래의 ??? 자리에 올 수 있는 것은 dir() 하여 `__iter__` 가 있는 object이다.\n\n```python\nfor i in ???:\n    print(i)\n```\n\n`-` 확인\n\n**iterable 하지 않다라는 것은`dir()`을 쳤을 때 `__iter__` 라는 메소드가 없다는 것을 의미**\n\n- 예상대로 예제1~예제4에서는 int클래스의 instance만 `__iter__`가 없다.\n\n- for문 뒤 `???` 자리에 올 수 있는 것은 **iterable object**만 올 수 있다.\n\n`-` `__iter__`의 역할: iterable object를 iterator로 만들 수 있다.\n\n`-` iterator가 되면 무엇이 좋은가? $\\to$ 숨겨진 기능 `__next__`가 열린다.\n\n- lst에는 `__next__` 가 없지만 ltor에는 있다.\n\n`-` 그래서 `__next__`의 기능은? $\\to$ 원소를 차례대로 꺼내준다. + 더 이상 꺼낼 원소가 없으면 Stopiteration Error 발생시킨다.\n\n`-` for문의 동작원리\n\n```python\nfor i in lst:\n    print(i)\n```\n\n(1) `lst.__iter__()` 혹은 `iter(lst)`를 이용하여 lst를 iterator로 만든다. (iterable object를 iterator object로 만든다.)\n\n(2) iterator에서 `.__next__()` 함수를 호출하고 결과를 i에 저장한 뒤에 for문 블락안에 있는 내용 (들여쓰기 된 내용)을 실행한다. $\\to$ 반복\n\n(3) StopIteration 에러가 발생하면 for문을 멈춘다.\n\n`-` 아래의 ??? 자리에 올 수 있는 것이 iterable object 가 아니라 iterator 자체여도 for문이 돌아갈까? (당연히 돌아가야 할 것 같음)\n\n```python\nfor i in ???:\n    print(i)\n```\n\n- 당연히 가능!\n\n`-` a가 iterator일때 iter(a)의 출력결과가 a와 같도록 조정한다면 for문의 동작원리 (1)-(3)을 수행하지 않아도 좋다. $\\to$ 실제로 이렇게 동작한다.\n\n`-` 요약\n\n- iterable object는 숨겨진 기능으로 `__iter__`를 가진다.\n- iterator object는 숨겨진 기능으로 `__iter__`와 `__next__`를 가진다. (즉 iterator는 그 자체로 iterable object가 된다!)\n\n`-` 의문2의 해결: for의 출력결과는 어떻게 예측할 수 있을까? iterator를 만들어서 `.__next__()`의 출력값을 확인하면 알 수 있다.\n\n## range()\n\n`-` 파이썬에서 for문을 처음 배울 때: range(5)를 써라!\n\n- range(5)가 도대체 무엇이길래?  ## iterator 아니면 iterable object 일건데..\n\n`-` range(5)의 정체는 그냥 iterable object이다.\n\n`__next__` 는 갖고있지 않은데 `__iter__`만 갖고있으니까 range(5)는 iterable object\n\n`-` 그래서 언제든지 iterator로 바꿀 수 있다.\n\n`-`  for문에서 range(5)가 행동하는 방법?\n\n\n## zip\n\n`-` 이터레이터의 개념을 알면 for문에 대한 이해도가 대폭 상승한다.\n\n- zip은 뭐지???\n\n`-` 어차피 for i in `????`: 의 ???? 자리는 iterable object(iterator)의 자리이다.\n\n- `__next__()` 함수가 있음 $\\to$ `zip([1,2,3],'abc')`는 그자체로 iterator 였다!\n\n## 사용자정의 이터레이터\n\n`-` 내가 이터레이터를 만들어보자.\n\n## 파이썬의 비밀 1~5\n\n- 파이썬의 비밀1: 자료형은 클래스의 이름이다.\n- 파이썬의 비밀2: 클래스에는 `__str__` 처럼 숨겨진 매서드가 존재한다. 이를 이용하여 파이썬 내부의 기능을 가로챌 수 있다.\n- 파이썬의 비밀3: 주피터노트북(대화형 콘솔)에서는 \"오브젝트이름 + 엔터\"를 쳐서 나오는 출력은 `__repr__`로 가로챌 수 있다. (주피터의 비밀)\n- 파이썬의 비밀4: 함수와 클래스는 숨겨진 메소드에 `__call__`을 가진 오브젝트일 뿐이다.\n- 파이썬의 비밀5: for문의 비밀(iterable object, iterator, StopIteration Error)\n","srcMarkdownNoYaml":"\n\n# 클래스공부 8단계\n\n> for문 복습, iterable object\n\n## import\n\n## for문의 복습\n\n`-` 아래와 같은 예제들을 관찰하여 for문을 복습하자.\n\n(예제1)\n\n(예제2)\n\n(예제3)\n\n(예제4)\n\n- 5라고 출력되어야 하지 않나?\n\n`-` 의문1:\n\n```python\nfor i in ???:\n    print(i)\n```\n\n에서 ???자리에 올 수 있는 것이 무엇일까?\n\n(예제5)\n\n***상황1***\n\n***상황2***\n\n칼럼이름들이 나오는 것 같음 $\\to$ 확인해보자.\n\n`-` 의문2: for의 출력결과는 어떻게 예측할 수 있을까?\n\n## for문의 동작원리\n\n`-` 의문1의 해결: 아래의 ??? 자리에 올 수 있는 것은 dir() 하여 `__iter__` 가 있는 object이다.\n\n```python\nfor i in ???:\n    print(i)\n```\n\n`-` 확인\n\n**iterable 하지 않다라는 것은`dir()`을 쳤을 때 `__iter__` 라는 메소드가 없다는 것을 의미**\n\n- 예상대로 예제1~예제4에서는 int클래스의 instance만 `__iter__`가 없다.\n\n- for문 뒤 `???` 자리에 올 수 있는 것은 **iterable object**만 올 수 있다.\n\n`-` `__iter__`의 역할: iterable object를 iterator로 만들 수 있다.\n\n`-` iterator가 되면 무엇이 좋은가? $\\to$ 숨겨진 기능 `__next__`가 열린다.\n\n- lst에는 `__next__` 가 없지만 ltor에는 있다.\n\n`-` 그래서 `__next__`의 기능은? $\\to$ 원소를 차례대로 꺼내준다. + 더 이상 꺼낼 원소가 없으면 Stopiteration Error 발생시킨다.\n\n`-` for문의 동작원리\n\n```python\nfor i in lst:\n    print(i)\n```\n\n(1) `lst.__iter__()` 혹은 `iter(lst)`를 이용하여 lst를 iterator로 만든다. (iterable object를 iterator object로 만든다.)\n\n(2) iterator에서 `.__next__()` 함수를 호출하고 결과를 i에 저장한 뒤에 for문 블락안에 있는 내용 (들여쓰기 된 내용)을 실행한다. $\\to$ 반복\n\n(3) StopIteration 에러가 발생하면 for문을 멈춘다.\n\n`-` 아래의 ??? 자리에 올 수 있는 것이 iterable object 가 아니라 iterator 자체여도 for문이 돌아갈까? (당연히 돌아가야 할 것 같음)\n\n```python\nfor i in ???:\n    print(i)\n```\n\n- 당연히 가능!\n\n`-` a가 iterator일때 iter(a)의 출력결과가 a와 같도록 조정한다면 for문의 동작원리 (1)-(3)을 수행하지 않아도 좋다. $\\to$ 실제로 이렇게 동작한다.\n\n`-` 요약\n\n- iterable object는 숨겨진 기능으로 `__iter__`를 가진다.\n- iterator object는 숨겨진 기능으로 `__iter__`와 `__next__`를 가진다. (즉 iterator는 그 자체로 iterable object가 된다!)\n\n`-` 의문2의 해결: for의 출력결과는 어떻게 예측할 수 있을까? iterator를 만들어서 `.__next__()`의 출력값을 확인하면 알 수 있다.\n\n## range()\n\n`-` 파이썬에서 for문을 처음 배울 때: range(5)를 써라!\n\n- range(5)가 도대체 무엇이길래?  ## iterator 아니면 iterable object 일건데..\n\n`-` range(5)의 정체는 그냥 iterable object이다.\n\n`__next__` 는 갖고있지 않은데 `__iter__`만 갖고있으니까 range(5)는 iterable object\n\n`-` 그래서 언제든지 iterator로 바꿀 수 있다.\n\n`-`  for문에서 range(5)가 행동하는 방법?\n\n\n## zip\n\n`-` 이터레이터의 개념을 알면 for문에 대한 이해도가 대폭 상승한다.\n\n- zip은 뭐지???\n\n`-` 어차피 for i in `????`: 의 ???? 자리는 iterable object(iterator)의 자리이다.\n\n- `__next__()` 함수가 있음 $\\to$ `zip([1,2,3],'abc')`는 그자체로 iterator 였다!\n\n## 사용자정의 이터레이터\n\n`-` 내가 이터레이터를 만들어보자.\n\n## 파이썬의 비밀 1~5\n\n- 파이썬의 비밀1: 자료형은 클래스의 이름이다.\n- 파이썬의 비밀2: 클래스에는 `__str__` 처럼 숨겨진 매서드가 존재한다. 이를 이용하여 파이썬 내부의 기능을 가로챌 수 있다.\n- 파이썬의 비밀3: 주피터노트북(대화형 콘솔)에서는 \"오브젝트이름 + 엔터\"를 쳐서 나오는 출력은 `__repr__`로 가로챌 수 있다. (주피터의 비밀)\n- 파이썬의 비밀4: 함수와 클래스는 숨겨진 메소드에 `__call__`을 가진 오브젝트일 뿐이다.\n- 파이썬의 비밀5: for문의 비밀(iterable object, iterator, StopIteration Error)\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"toc":true,"output-file":"2023-02-23-class08.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.315","theme":"cosmo","code-copy":true,"title-block-banner":true,"title":"**[IP2022]** class 8단계","author":"jiyun Lim","date":"02/23/2023","categories":["class","Python"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}