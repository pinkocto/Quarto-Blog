{"title":"**[IP2022]** class 4단계","markdown":{"yaml":{"title":"**[IP2022]** class 4단계","author":"jiyun Lim","date":"02/15/2023","categories":["class","Python"]},"headingText":"클래스 공부 4단계","containsRefs":false,"markdown":"\n\n> 프린트 가로채기 `__str__`, `__repr__` (파이썬의 비밀2,3)\n\n## Contents\n> 1. motivating example\n> 2. `__str__`, 파이썬의 비밀2\n> 3. `__repr__`, 파이썬의 비밀3\n> 4. 주피터 노트북의 비밀 (`_repr_html_`), `__repr__`와 `__str__`의 우선적용 순위\n\n## imports\n\n## 01. Motivating Example\n\n### `-` 가위바위보\n\n#### class1 review\n\n#### 가위,보 GAME\n\n[가위, 바위, 보] 말고 [가위, 보] 혹은 [바위, 보] 처럼 정해진 케이스가 아닌 입력으로 받고 싶을 수도 있다.\n\n#### 가위바위보1\n\n#### 가위바위보2 (풀어서)\n\n위의 코드 3줄과 동일한 코드이며, 풀어써보면 다음과 같다.\n\n#### 가위바위보2 (재조합)\n\n풀어쓴 코드를 조합해보면?\n\n#### throw = choose + show?\n\n생각해보니까 throw는 choose + show의 결합인 것 같다.\n\n#### **보충학습**: 시점별 분석 (throw + show)\n위와 같은 코드입니다.\n\n### `-` 인스턴스 $b$ 추가\n\n또 다른 인스턴스 b를 만들자. b는 가위만 낼 수 있다.\n\n```\nclass RPC: ## 시점1\n    def __init__(self, candidate = ['가위', '바위', '보']):\n        self.candidate = candidate\n    def choose(self):\n        self.actions = np.random.choice(self.candidate)\n    def show(self):\n        print(self.actions)\n        \n```\n        \n\n- 아무것도 없으면 b의 candidate이 가위, 가위, 보로 들어감\n\n`-` a, b의 선택들을 모아서 기록하고 싶다.\n\n- `show()` 지난 히스토리까지 다 나오니까 보기 좀 불편하댜\n\n`-` info라는 함수를 만들어서 a의 오브젝트가 가지고 있는 정보를 모두 보도록 하자.\n\n(예비학습) 문자열 `\\n` 이 포함된다면?\n\n예비학습 끝\n\n`-` 만들고보니까 info와 print의 기능이 거의 비슷함 $\\to$ print(a)를 하면 a.info()와 동일한 효과를 내도록 만들 수 있을까?\n\n`-` 말도 안되는 소리같다. 왜?\n- 안될것 같은 이유1: print는 파이썬 내장기능, 내장기능을 우리가 맘대로 커스터마이징해서 쓰기는 어려울 것 같다.\n- 안될 것 같은 이유2: 이유1이 해결된다 해도 문제다. 그럼 지금까지 우리가 사용했던 수 많은 print()의 결과는 어떻게 되는가?\n\n**결론은 가능하다**\n\n`-` 그런데 a의 자료형(RPC 자료형)에 해당하는 오브젝트에 한정하여 print를 수정하는 방법이 가능하다면? (그럼 다른 오브젝트들은 수정된 print에 영향을 받지 않음)\n\n## 02. `__str__`\n\n`-` 관찰1: 현재 print(a)의 결과는 아래와 같다.\n\n- a는 RPC클래스에서 만든 오브젝트이며 a가 저장된 메모리 주소는 0x7faaa7500850라는 의미\n\n`-` 관찰2: a에는 `__str__` 이 있다.\n\n이것을 함수처럼 사용하니까 아래와 같다.\n\n`-` 생각: 만약에 내가 `a.__str__()` 라는 함수를 재정의 하여 리턴값을 '너는 해킹당했다'로 바꾸게 되면 print(a)해서 나오는 결과는 어떻게 될까? (약간 해커같죠)\n\n(예비학습) 함수 덮어씌우기\n\n이런식으로 함수가 이미 정의되어 있더라도, 내가 나중에 덮어씌우면 그 함수의 기능을 다시 정의한다.\n\n(해킹시작)\n\n`-` `__str__` 의 리턴값을 info에서 타이핑했던 문자열로 재정의한다면?\n\n### 파이썬의 비밀2\n\n`-` `print(a)` 와 `print(a.__str__())` 는 같은 문법이다.\n\n`-` 참고로 `a.__str__()` 와 `str(a)` 도 같은 방법이다.\n\n`-` 지금까지 우리가 썼던 기능을 확인!\n\n(예제1)\n\n(예제2)\n\n(예제3)\n\n(예제4)\n\n(예제5)\n\n## 03. `__repr__`\n\n`-` 생각해보니까  print를 써서 우리가 원하는 정보를 확인하는건 아니였음\n\n`-`` a + 엔터`를 하면 `print(a) + 엔터`를 하는 것과 같은 효과인가?\n\n(반례)\n\n`-` `a + 엔터` 는 `print(a) + 엔터` 가 다른 경우도 있다. $\\to$ 추측: 서로 다른 숨겨진 기능이 있다! $\\to$ 결론: 그 기능은 `__repr__` 에 저장되어 있음. \n\n- `__repr__` 추가 전\n\n- `__repr__` 추가 후\n\n`-` 그럼 우리가 지금까지 했던 것?\n\n### 파이썬의 비밀3\n\n`-` 대화형콘솔에서 `오브젝트이름 + 엔터`를 쳐서 나오는 출력은 `__repr__`의 결과와 연관이 있다.\n\n`-` 참고로 `a.__repr__()`은 `repr(a)`와 같다.\n\n### 주피터노트북의 비밀(`_repr_html`)\n\n`-` 요즘에는 IDE 발전에 따라서 `오브젝트 + 엔터` 칠 때 나오는 출력의 형태도 다양해지고 있음.\n\n- 예쁘게 나온다.\n\n`-` 위의 결과는 `print(df.__repr__())`의 결과와 조금 다르게 나온다?\n\n`-` `print(df.__repr__())`는 예전 검은화면에서 코딩할 때 나오는 출력임\n\n```\nPython 3.10.2 | packaged by conda-forge | (main, Feb  1 2022, 19:28:35) [GCC 9.4.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n> >> import pandas as pd \n>>> df = pd.DataFrame({'a':[1,2,3],'b':[2,3,4]})>>> df\n   a  b\n0  1  2\n1  2  3\n2  3  4\n>>>\n```\n\n`-` 주피터에서는 '오브젝트이름 + 엔터' 치면 `HTML(df.__repr_html())`이 실행되고 `repr_html_()`이 정의되어 있지 않으면 `print(df.__rept__())`이 실행된다.\n\n- html 코드!\n\n`-` 물론 `df._repr_html_()`함수가 내부적으로 있어도 html이 지원되지 않는 환경이라면 `print(df.__repr__())`이 내부적으로 수행된다.\n\n## 04. `__repr__`와 `__str__`의 우선적용 순위\n\n(예제1)\n\n`-` 아래의 예제를 관찰하자.\n\n`-` 여기까지는 상식수준의 결과임. 이제 아래를 관찰하라.\n\n- `__str__()`은 건드린적이 없는데?\n\n- `__str__()`은 건드린 적이 없는데 $\\to$ 건드린적은 없는데 기능이 바뀌어있음.\n\n(예제2)\n\n`-` 아래의 예제를 관찰하자.\n\n2번째 예제에서는 건드린 애만 바뀌었는데 첫번째 예제에서는 건드리지 않은 애들까지 기능이 바뀌었다.\n\n(예제3)\n\n`-` `__str__` 와 `__repr__`을 건드리지 않고 출력결과를 바꾸고 싶다면?\n\n## 05. 숙제\n\n아래의 클래스를 수정하여\n```python\nclass RPS: \n    def __init__(self,candidate=['가위','바위','보']):\n        self.candidate = candidate\n        self.actions = list() \n    def choose(self):\n        self.actions.append(np.random.choice(self.candidate))\n    def show(self):\n        print(self.actions[-1])\n    def _repr_html_(self):\n        html_str = \"\"\"\n        낼 수 있는 패: {} <br/> \n        기록: {}\n        \"\"\"\n        return html_str.format(self.candidate,self.actions)\n```\n클래스에서 생성된 인스턴스의 출력결과가 아래와 같도록 하라.\n\n```\n학번: 202143052 \n낼 수 있는 패: ['가위', '바위', '보']\n기록: ['가위', '가위', '보', '보', '바위']\n```\n","srcMarkdownNoYaml":"\n\n# 클래스 공부 4단계\n> 프린트 가로채기 `__str__`, `__repr__` (파이썬의 비밀2,3)\n\n## Contents\n> 1. motivating example\n> 2. `__str__`, 파이썬의 비밀2\n> 3. `__repr__`, 파이썬의 비밀3\n> 4. 주피터 노트북의 비밀 (`_repr_html_`), `__repr__`와 `__str__`의 우선적용 순위\n\n## imports\n\n## 01. Motivating Example\n\n### `-` 가위바위보\n\n#### class1 review\n\n#### 가위,보 GAME\n\n[가위, 바위, 보] 말고 [가위, 보] 혹은 [바위, 보] 처럼 정해진 케이스가 아닌 입력으로 받고 싶을 수도 있다.\n\n#### 가위바위보1\n\n#### 가위바위보2 (풀어서)\n\n위의 코드 3줄과 동일한 코드이며, 풀어써보면 다음과 같다.\n\n#### 가위바위보2 (재조합)\n\n풀어쓴 코드를 조합해보면?\n\n#### throw = choose + show?\n\n생각해보니까 throw는 choose + show의 결합인 것 같다.\n\n#### **보충학습**: 시점별 분석 (throw + show)\n위와 같은 코드입니다.\n\n### `-` 인스턴스 $b$ 추가\n\n또 다른 인스턴스 b를 만들자. b는 가위만 낼 수 있다.\n\n```\nclass RPC: ## 시점1\n    def __init__(self, candidate = ['가위', '바위', '보']):\n        self.candidate = candidate\n    def choose(self):\n        self.actions = np.random.choice(self.candidate)\n    def show(self):\n        print(self.actions)\n        \n```\n        \n\n- 아무것도 없으면 b의 candidate이 가위, 가위, 보로 들어감\n\n`-` a, b의 선택들을 모아서 기록하고 싶다.\n\n- `show()` 지난 히스토리까지 다 나오니까 보기 좀 불편하댜\n\n`-` info라는 함수를 만들어서 a의 오브젝트가 가지고 있는 정보를 모두 보도록 하자.\n\n(예비학습) 문자열 `\\n` 이 포함된다면?\n\n예비학습 끝\n\n`-` 만들고보니까 info와 print의 기능이 거의 비슷함 $\\to$ print(a)를 하면 a.info()와 동일한 효과를 내도록 만들 수 있을까?\n\n`-` 말도 안되는 소리같다. 왜?\n- 안될것 같은 이유1: print는 파이썬 내장기능, 내장기능을 우리가 맘대로 커스터마이징해서 쓰기는 어려울 것 같다.\n- 안될 것 같은 이유2: 이유1이 해결된다 해도 문제다. 그럼 지금까지 우리가 사용했던 수 많은 print()의 결과는 어떻게 되는가?\n\n**결론은 가능하다**\n\n`-` 그런데 a의 자료형(RPC 자료형)에 해당하는 오브젝트에 한정하여 print를 수정하는 방법이 가능하다면? (그럼 다른 오브젝트들은 수정된 print에 영향을 받지 않음)\n\n## 02. `__str__`\n\n`-` 관찰1: 현재 print(a)의 결과는 아래와 같다.\n\n- a는 RPC클래스에서 만든 오브젝트이며 a가 저장된 메모리 주소는 0x7faaa7500850라는 의미\n\n`-` 관찰2: a에는 `__str__` 이 있다.\n\n이것을 함수처럼 사용하니까 아래와 같다.\n\n`-` 생각: 만약에 내가 `a.__str__()` 라는 함수를 재정의 하여 리턴값을 '너는 해킹당했다'로 바꾸게 되면 print(a)해서 나오는 결과는 어떻게 될까? (약간 해커같죠)\n\n(예비학습) 함수 덮어씌우기\n\n이런식으로 함수가 이미 정의되어 있더라도, 내가 나중에 덮어씌우면 그 함수의 기능을 다시 정의한다.\n\n(해킹시작)\n\n`-` `__str__` 의 리턴값을 info에서 타이핑했던 문자열로 재정의한다면?\n\n### 파이썬의 비밀2\n\n`-` `print(a)` 와 `print(a.__str__())` 는 같은 문법이다.\n\n`-` 참고로 `a.__str__()` 와 `str(a)` 도 같은 방법이다.\n\n`-` 지금까지 우리가 썼던 기능을 확인!\n\n(예제1)\n\n(예제2)\n\n(예제3)\n\n(예제4)\n\n(예제5)\n\n## 03. `__repr__`\n\n`-` 생각해보니까  print를 써서 우리가 원하는 정보를 확인하는건 아니였음\n\n`-`` a + 엔터`를 하면 `print(a) + 엔터`를 하는 것과 같은 효과인가?\n\n(반례)\n\n`-` `a + 엔터` 는 `print(a) + 엔터` 가 다른 경우도 있다. $\\to$ 추측: 서로 다른 숨겨진 기능이 있다! $\\to$ 결론: 그 기능은 `__repr__` 에 저장되어 있음. \n\n- `__repr__` 추가 전\n\n- `__repr__` 추가 후\n\n`-` 그럼 우리가 지금까지 했던 것?\n\n### 파이썬의 비밀3\n\n`-` 대화형콘솔에서 `오브젝트이름 + 엔터`를 쳐서 나오는 출력은 `__repr__`의 결과와 연관이 있다.\n\n`-` 참고로 `a.__repr__()`은 `repr(a)`와 같다.\n\n### 주피터노트북의 비밀(`_repr_html`)\n\n`-` 요즘에는 IDE 발전에 따라서 `오브젝트 + 엔터` 칠 때 나오는 출력의 형태도 다양해지고 있음.\n\n- 예쁘게 나온다.\n\n`-` 위의 결과는 `print(df.__repr__())`의 결과와 조금 다르게 나온다?\n\n`-` `print(df.__repr__())`는 예전 검은화면에서 코딩할 때 나오는 출력임\n\n```\nPython 3.10.2 | packaged by conda-forge | (main, Feb  1 2022, 19:28:35) [GCC 9.4.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n> >> import pandas as pd \n>>> df = pd.DataFrame({'a':[1,2,3],'b':[2,3,4]})>>> df\n   a  b\n0  1  2\n1  2  3\n2  3  4\n>>>\n```\n\n`-` 주피터에서는 '오브젝트이름 + 엔터' 치면 `HTML(df.__repr_html())`이 실행되고 `repr_html_()`이 정의되어 있지 않으면 `print(df.__rept__())`이 실행된다.\n\n- html 코드!\n\n`-` 물론 `df._repr_html_()`함수가 내부적으로 있어도 html이 지원되지 않는 환경이라면 `print(df.__repr__())`이 내부적으로 수행된다.\n\n## 04. `__repr__`와 `__str__`의 우선적용 순위\n\n(예제1)\n\n`-` 아래의 예제를 관찰하자.\n\n`-` 여기까지는 상식수준의 결과임. 이제 아래를 관찰하라.\n\n- `__str__()`은 건드린적이 없는데?\n\n- `__str__()`은 건드린 적이 없는데 $\\to$ 건드린적은 없는데 기능이 바뀌어있음.\n\n(예제2)\n\n`-` 아래의 예제를 관찰하자.\n\n2번째 예제에서는 건드린 애만 바뀌었는데 첫번째 예제에서는 건드리지 않은 애들까지 기능이 바뀌었다.\n\n(예제3)\n\n`-` `__str__` 와 `__repr__`을 건드리지 않고 출력결과를 바꾸고 싶다면?\n\n## 05. 숙제\n\n아래의 클래스를 수정하여\n```python\nclass RPS: \n    def __init__(self,candidate=['가위','바위','보']):\n        self.candidate = candidate\n        self.actions = list() \n    def choose(self):\n        self.actions.append(np.random.choice(self.candidate))\n    def show(self):\n        print(self.actions[-1])\n    def _repr_html_(self):\n        html_str = \"\"\"\n        낼 수 있는 패: {} <br/> \n        기록: {}\n        \"\"\"\n        return html_str.format(self.candidate,self.actions)\n```\n클래스에서 생성된 인스턴스의 출력결과가 아래와 같도록 하라.\n\n```\n학번: 202143052 \n낼 수 있는 패: ['가위', '바위', '보']\n기록: ['가위', '가위', '보', '보', '바위']\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"toc":true,"output-file":"2023-02-15-class04.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.315","theme":"cosmo","code-copy":true,"title-block-banner":true,"title":"**[IP2022]** class 4단계","author":"jiyun Lim","date":"02/15/2023","categories":["class","Python"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}