{"title":"class 2단계","markdown":{"yaml":{"title":"class 2단계","author":"jiyun Lim","date":"02/15/2023","categories":["class","Python"]},"headingText":"클래스 공부 2단계","containsRefs":false,"markdown":"\n\n## Contents\n> 1. `__init__` \n> 2. self의 의미\n> 3. 파이썬의 비밀1\n> 4. 파이썬의 비밀2\n\n## imports\n\n### `__init__()`\n`-` STOOOP을 다시 복습\n\n`-` 왜 s1의 default title이 항상 '학교폭력' 이어야 하는가? $\\to$ `__init__` 의 개발\n\n`-` 성능4: `__init__()` 함수를 이용하여 '클래스 $\\to$ 인스턴스' 의 시점에서 수행하는 일련의 동작들을 묶어서 수행할 수 있음.\n\n`-` 잘못된 사용\n\n`-` 올바른 사용\n\n`-` 잘못된 사용에서 에러가 발생한 이유는?\n\n`TypeError: __init__() missing 1 required positional argument: 'title'`\n\n- s1 = STOOOP() 이 실행되는 순간 `__init__()` 이 내부적으로 실행된다.\n- 그런데 `__init__()` 의 첫번째 입력인 `self`는 입력안해도 무방했음. 그런데 두번째 입력은 title은 입력을 해야했음.\n- 그런데 title을 입력하지 않아서 발생하는 에러.\n\n`-` `__init__(self, arg1, arg2,...)` 함수에 대하여\n\n- 엄청나게 특별해 보이지만 사실 몇가지 특별한 점을 제외하고는 어떠한 마법도 없는 함수이다.\n\n- 특별한 점1: 첫번째 입력으로 반드시 self를 넣어야함. (이건 사실 클래스 내의 메소드 거의 다 그러함)\n\n- 특별한 점2: 클래스에서 인스턴스를 만드는 시점에 자동으로 실행된다.\n\n- 특별한 점3: `__init(self, arg1, arg2,...)`의 입력중 self 이외의 입력들은 '클래스 $\\to$ 인스턴스' 시점에서 '인스턴스이름 = 클래스이름(arg1, arg2,...)'와 같이 사용한다. (이 예제의 경우 **STOOOP(title)** 와 같이 사용해야함)\n\n\n`-` title이 디폴트로 들어가는 상황도 불편했지만, title을 명시적으로 넣지 않으면 에러가 발생하는 것도 불편하다?\n\n- 제목이 없으면 없는대로 잘 출력이 된다.\n\n## self의 의미\n\n`-` 이전 예제를 복습\n\n`-` 위의 예제는 아래와 같이 구현할 수도 있다.\n\n- 결국에는 `k4.n = k4.n + 1`의 기능을 구현하여 넣은 것이 `self.n = self.n + 1` 이다.\n- 따라서 self는 k4에 대응한다. 즉, self는 인스턴스 이름에 대응한다.\n    - 우리가 하고 싶은 것은 클래스를 선언하는 시점에서 인스턴스가 생성된 이후 시점에 대한 어떠한 동작들을 정의하고 싶다. \n    - 그런데 클래스가 설계하는 시점에서 인스턴스의 이름이 정해지지 않았으므로 이러한 동작들을 정의하기에 불편하다.\n    - 그래서 클래스를 설계하는 시점에 그 클래스로부터 만들어지는 인스턴스는 그냥 self라는 가칭으로 부른다.\n        - 굳이 비유를 하자면 self는 인스턴스의 태명 같은 것이다.\n\n- 요약: self의 의미는 (후에 만들어질 ) 인스턴스의 이름이다. (즉, self는 인스턴스의 태명같은 것!)\n\n### 파이썬의 비밀1\n\n**탐구**: 인스턴스의 자료형이 무엇인지 탐구해보자.\n\n`-` 아래의 두 클래스를 선언해보자.\n\n`-` 인스턴스를 생성해보자.\n\n#### `-` 타입을 알아보자.\n\n`-` ??? 타입은 자료형 즉, `int`, `float`, `list` 이런 것 아니었나?\n\n`-` 그런데 지금 k4, s1의 타입은 Klass4, STOOOP이다.\n\n\n- 가설1 : 사실 파이썬 내부에 Klass4, STOOOP이라는 자료형이 있었다. 그런데 내가 만든 k4, s1이 우연히 그 자료형을 따르는 것! (이건 너무 억지스럽다.)\n\n\n- 가설2: type이 list인 것은 사실 list라는 클래스에서 생긴 인스턴스이다. $\\to$ 리스트 자료형을 찍어낼 수 있는 어떤 클래스가 파이썬에 내부적으로 존재할 것이다. (이게 맞는 것 같다.)\n\n**꺠달음1**\n\n`-` 가설2가 맞다? 그렇다면 아래는 모두 어딘가에서 찍혀진 인스턴스이다.\n\n`-` 그리고 위의 `a=[1,2,3]` 과 같은 것들은 모두 '클래스$\\to$ 인스턴스'  에 해당하는 과정이었다.\n\n**깨달음2**\n\n`-` 생각해보니까 아래와 같이 list를 선언하는 방식도 있었음\n\n- 이거 지금 생각해보니까 list라는 이름의 클래스에서 a라는 인스턴스를 찍어내는 문법이다?!\n\n`-` 아래도 가능함\n\n- 이것도 지금 보니까 list라는 이름의 클래스에서 a라는 인스턴스를 찍어내는 문법이다. 여기에서 (1,2,3)은 `__init__()` 의 입력이다.\n\n**깨달음3**\n\n`-` 그러고보니까 각 자료형마다 특수한 기능들이 있었음.\n\n`-` `a.` + tab을 하면 append, clear 등등이 나온다.\n\n`-` 이러한 기능은 지금까지 우리가 'list자료형 특수기능들' 이라고 부르면서 사용했었다. 그런데 a가 list 클래스에서 생성된 인스턴스라는 관점에서 보면 이러한 기능들은 list 클래스에서 정의된 메소드라고 볼 수 있다.\n\n**깨달음4**\n`-` `a.f()` 는 `f(a)` 로 해석 가능하다고 하였다. 이 해석에 따르면 메소드의 첫번째 입력은 메소드가 소속된 인스턴스라고 해석할 수 있다.\n\n`-` 동일한 논리로 아래의 코드는 stop() 의 입력에서 s1을 넣는다는 의미이다.\n\n## Homework\n아래의 조건에 맞는 클래스를 생성하라.\n\n(1) `['가위', '바위']` 와 같은 리스트를 입력으로 받아 인스턴스를 생성한다.\n\n(2) 위의 리스트에서 하나의 값을 뽑는 메소드 `f`를 가지고 있다.\n\n```\n# 사용예시\na = Klass(['가위', '바위'])\na.f() # 가위가 1/2 바위가 1/2의 확률로 출력\nb = Klass(['가위', '바위', '보'])\nb.f() # 가위, 바위, 보가 1/3의 확률로 출력\n```\n","srcMarkdownNoYaml":"\n\n# 클래스 공부 2단계\n## Contents\n> 1. `__init__` \n> 2. self의 의미\n> 3. 파이썬의 비밀1\n> 4. 파이썬의 비밀2\n\n## imports\n\n### `__init__()`\n`-` STOOOP을 다시 복습\n\n`-` 왜 s1의 default title이 항상 '학교폭력' 이어야 하는가? $\\to$ `__init__` 의 개발\n\n`-` 성능4: `__init__()` 함수를 이용하여 '클래스 $\\to$ 인스턴스' 의 시점에서 수행하는 일련의 동작들을 묶어서 수행할 수 있음.\n\n`-` 잘못된 사용\n\n`-` 올바른 사용\n\n`-` 잘못된 사용에서 에러가 발생한 이유는?\n\n`TypeError: __init__() missing 1 required positional argument: 'title'`\n\n- s1 = STOOOP() 이 실행되는 순간 `__init__()` 이 내부적으로 실행된다.\n- 그런데 `__init__()` 의 첫번째 입력인 `self`는 입력안해도 무방했음. 그런데 두번째 입력은 title은 입력을 해야했음.\n- 그런데 title을 입력하지 않아서 발생하는 에러.\n\n`-` `__init__(self, arg1, arg2,...)` 함수에 대하여\n\n- 엄청나게 특별해 보이지만 사실 몇가지 특별한 점을 제외하고는 어떠한 마법도 없는 함수이다.\n\n- 특별한 점1: 첫번째 입력으로 반드시 self를 넣어야함. (이건 사실 클래스 내의 메소드 거의 다 그러함)\n\n- 특별한 점2: 클래스에서 인스턴스를 만드는 시점에 자동으로 실행된다.\n\n- 특별한 점3: `__init(self, arg1, arg2,...)`의 입력중 self 이외의 입력들은 '클래스 $\\to$ 인스턴스' 시점에서 '인스턴스이름 = 클래스이름(arg1, arg2,...)'와 같이 사용한다. (이 예제의 경우 **STOOOP(title)** 와 같이 사용해야함)\n\n\n`-` title이 디폴트로 들어가는 상황도 불편했지만, title을 명시적으로 넣지 않으면 에러가 발생하는 것도 불편하다?\n\n- 제목이 없으면 없는대로 잘 출력이 된다.\n\n## self의 의미\n\n`-` 이전 예제를 복습\n\n`-` 위의 예제는 아래와 같이 구현할 수도 있다.\n\n- 결국에는 `k4.n = k4.n + 1`의 기능을 구현하여 넣은 것이 `self.n = self.n + 1` 이다.\n- 따라서 self는 k4에 대응한다. 즉, self는 인스턴스 이름에 대응한다.\n    - 우리가 하고 싶은 것은 클래스를 선언하는 시점에서 인스턴스가 생성된 이후 시점에 대한 어떠한 동작들을 정의하고 싶다. \n    - 그런데 클래스가 설계하는 시점에서 인스턴스의 이름이 정해지지 않았으므로 이러한 동작들을 정의하기에 불편하다.\n    - 그래서 클래스를 설계하는 시점에 그 클래스로부터 만들어지는 인스턴스는 그냥 self라는 가칭으로 부른다.\n        - 굳이 비유를 하자면 self는 인스턴스의 태명 같은 것이다.\n\n- 요약: self의 의미는 (후에 만들어질 ) 인스턴스의 이름이다. (즉, self는 인스턴스의 태명같은 것!)\n\n### 파이썬의 비밀1\n\n**탐구**: 인스턴스의 자료형이 무엇인지 탐구해보자.\n\n`-` 아래의 두 클래스를 선언해보자.\n\n`-` 인스턴스를 생성해보자.\n\n#### `-` 타입을 알아보자.\n\n`-` ??? 타입은 자료형 즉, `int`, `float`, `list` 이런 것 아니었나?\n\n`-` 그런데 지금 k4, s1의 타입은 Klass4, STOOOP이다.\n\n\n- 가설1 : 사실 파이썬 내부에 Klass4, STOOOP이라는 자료형이 있었다. 그런데 내가 만든 k4, s1이 우연히 그 자료형을 따르는 것! (이건 너무 억지스럽다.)\n\n\n- 가설2: type이 list인 것은 사실 list라는 클래스에서 생긴 인스턴스이다. $\\to$ 리스트 자료형을 찍어낼 수 있는 어떤 클래스가 파이썬에 내부적으로 존재할 것이다. (이게 맞는 것 같다.)\n\n**꺠달음1**\n\n`-` 가설2가 맞다? 그렇다면 아래는 모두 어딘가에서 찍혀진 인스턴스이다.\n\n`-` 그리고 위의 `a=[1,2,3]` 과 같은 것들은 모두 '클래스$\\to$ 인스턴스'  에 해당하는 과정이었다.\n\n**깨달음2**\n\n`-` 생각해보니까 아래와 같이 list를 선언하는 방식도 있었음\n\n- 이거 지금 생각해보니까 list라는 이름의 클래스에서 a라는 인스턴스를 찍어내는 문법이다?!\n\n`-` 아래도 가능함\n\n- 이것도 지금 보니까 list라는 이름의 클래스에서 a라는 인스턴스를 찍어내는 문법이다. 여기에서 (1,2,3)은 `__init__()` 의 입력이다.\n\n**깨달음3**\n\n`-` 그러고보니까 각 자료형마다 특수한 기능들이 있었음.\n\n`-` `a.` + tab을 하면 append, clear 등등이 나온다.\n\n`-` 이러한 기능은 지금까지 우리가 'list자료형 특수기능들' 이라고 부르면서 사용했었다. 그런데 a가 list 클래스에서 생성된 인스턴스라는 관점에서 보면 이러한 기능들은 list 클래스에서 정의된 메소드라고 볼 수 있다.\n\n**깨달음4**\n`-` `a.f()` 는 `f(a)` 로 해석 가능하다고 하였다. 이 해석에 따르면 메소드의 첫번째 입력은 메소드가 소속된 인스턴스라고 해석할 수 있다.\n\n`-` 동일한 논리로 아래의 코드는 stop() 의 입력에서 s1을 넣는다는 의미이다.\n\n## Homework\n아래의 조건에 맞는 클래스를 생성하라.\n\n(1) `['가위', '바위']` 와 같은 리스트를 입력으로 받아 인스턴스를 생성한다.\n\n(2) 위의 리스트에서 하나의 값을 뽑는 메소드 `f`를 가지고 있다.\n\n```\n# 사용예시\na = Klass(['가위', '바위'])\na.f() # 가위가 1/2 바위가 1/2의 확률로 출력\nb = Klass(['가위', '바위', '보'])\nb.f() # 가위, 바위, 보가 1/3의 확률로 출력\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"toc":true,"output-file":"2023-02-15-class2.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.315","theme":"cosmo","code-copy":true,"title-block-banner":true,"title":"class 2단계","author":"jiyun Lim","date":"02/15/2023","categories":["class","Python"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}