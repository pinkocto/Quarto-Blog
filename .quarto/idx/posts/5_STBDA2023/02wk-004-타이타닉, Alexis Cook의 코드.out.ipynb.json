{"title":"02wk-004: 타이타닉, Alexis Cook의 코드","markdown":{"yaml":{"title":"02wk-004: 타이타닉, Alexis Cook의 코드","author":"최규빈","date":"09/12/2023"},"headingText":"1. 강의영상","containsRefs":false,"markdown":"\n\n\n<https://youtu.be/playlist?list=PLQqh36zP38-yR3MqhN9-OgAtewojoYoKD&si=U1GTMdGiWFvlppYH>\n\n# 2. Alexis Cook의 분석\n\nLogging into Kaggle for the first time can be daunting. Our competitions\noften have large cash prizes, public leaderboards, and involve complex\ndata. Nevertheless, we really think all data scientists can rapidly\nlearn from machine learning competitions and meaningfully contribute to\nour community. To give you a clear understanding of how our platform\nworks and a mental model of the type of learning you could do on Kaggle,\nwe’ve created a Getting Started tutorial for the Titanic competition. It\nwalks you through the initial steps required to get your first decent\nsubmission on the leaderboard. By the end of the tutorial, you’ll also\nhave a solid understanding of how to use Kaggle’s online coding\nenvironment, where you’ll have trained your own machine learning model.\n\nSo if this is your first time entering a Kaggle competition, regardless\nof whether you: - have experience with handling large datasets, -\nhaven’t done much coding, - are newer to data science, or - are\nrelatively experienced (but are just unfamiliar with Kaggle’s platform),\n\nyou’re in the right place!\n\n## Part 1: Get started\n\nIn this section, you’ll learn more about the competition and make your\nfirst submission.\n\n### Join the competition!\n\nThe first thing to do is to join the competition! Open a new window with\n**[the competition page](https://www.kaggle.com/c/titanic)**, and click\non the **“Join Competition”** button, if you haven’t already. (*If you\nsee a “Submit Predictions” button instead of a “Join Competition”\nbutton, you have already joined the competition, and don’t need to do so\nagain.*)\n\n![](https://i.imgur.com/07cskyU.png)\n\nThis takes you to the rules acceptance page. You must accept the\ncompetition rules in order to participate. These rules govern how many\nsubmissions you can make per day, the maximum team size, and other\ncompetition-specific details. Then, click on **“I Understand and\nAccept”** to indicate that you will abide by the competition rules.\n\n### The challenge\n\nThe competition is simple: we want you to use the Titanic passenger data\n(name, age, price of ticket, etc) to try to predict who will survive and\nwho will die.\n\n### The data\n\nTo take a look at the competition data, click on the\n**<a href=\"https://www.kaggle.com/c/titanic/data\" target=\"_blank\" rel=\"noopener noreferrer\"><b>Data\ntab</b></a>** at the top of the competition page. Then, scroll down to\nfind the list of files.  \nThere are three files in the data: (1) **train.csv**, (2) **test.csv**,\nand (3) **gender_submission.csv**.\n\n#### (1) train.csv\n\n**train.csv** contains the details of a subset of the passengers on\nboard (891 passengers, to be exact – where each passenger gets a\ndifferent row in the table). To investigate this data, click on the name\nof the file on the left of the screen. Once you’ve done this, you can\nview all of the data in the window.\n\n![](https://i.imgur.com/cYsdt0n.png)\n\nThe values in the second column (**“Survived”**) can be used to\ndetermine whether each passenger survived or not: - if it’s a “1”, the\npassenger survived. - if it’s a “0”, the passenger died.\n\nFor instance, the first passenger listed in **train.csv** is Mr. Owen\nHarris Braund. He was 22 years old when he died on the Titanic.\n\n#### (2) test.csv\n\nUsing the patterns you find in **train.csv**, you have to predict\nwhether the other 418 passengers on board (in **test.csv**) survived.\n\nClick on **test.csv** (on the left of the screen) to examine its\ncontents. Note that **test.csv** does not have a **“Survived”** column -\nthis information is hidden from you, and how well you do at predicting\nthese hidden values will determine how highly you score in the\ncompetition!\n\n#### (3) gender_submission.csv\n\nThe **gender_submission.csv** file is provided as an example that shows\nhow you should structure your predictions. It predicts that all female\npassengers survived, and all male passengers died. Your hypotheses\nregarding survival will probably be different, which will lead to a\ndifferent submission file. But, just like this file, your submission\nshould have: - a **“PassengerId”** column containing the IDs of each\npassenger from **test.csv**. - a **“Survived”** column (that you will\ncreate!) with a “1” for the rows where you think the passenger survived,\nand a “0” where you predict that the passenger died.\n\n## Part 2: Your coding environment\n\nIn this section, you’ll train your own machine learning model to improve\nyour predictions. *If you’ve never written code before or don’t have any\nexperience with machine learning, don’t worry! We don’t assume any prior\nexperience in this tutorial.*\n\n### The Notebook\n\nThe first thing to do is to create a Kaggle Notebook where you’ll store\nall of your code. You can use Kaggle Notebooks to getting up and running\nwith writing code quickly, and without having to install anything on\nyour computer. (*If you are interested in deep learning, we also offer\nfree GPU access!*)\n\nBegin by clicking on the\n**<a href=\"https://www.kaggle.com/c/titanic/kernels\" target=\"_blank\">Code\ntab</a>** on the competition page. Then, click on **“New Notebook”**.\n\n![](https://i.imgur.com/v2i82Xd.png)\n\nYour notebook will take a few seconds to load. In the top left corner,\nyou can see the name of your notebook – something like\n**“kernel2daed3cd79”**.\n\n![](https://i.imgur.com/64ZFT1L.png)\n\nYou can edit the name by clicking on it. Change it to something more\ndescriptive, like **“Getting Started with Titanic”**.\n\n![](https://i.imgur.com/uwyvzXq.png)\n\n### Your first lines of code\n\nWhen you start a new notebook, it has two gray boxes for storing code.\nWe refer to these gray boxes as “code cells”.\n\n![](https://i.imgur.com/q9mwkZM.png)\n\nThe first code cell already has some code in it. To run this code, put\nyour cursor in the code cell. (*If your cursor is in the right place,\nyou’ll notice a blue vertical line to the left of the gray box.*) Then,\neither hit the play button (which appears to the left of the blue line),\nor hit **\\[Shift\\] + \\[Enter\\]** on your keyboard.\n\nIf the code runs successfully, three lines of output are returned.\nBelow, you can see the same code that you just ran, along with the\noutput that you should see in your notebook.\n\nThis shows us where the competition data is stored, so that we can load\nthe files into the notebook. We’ll do that next.\n\n### Load the data\n\nThe second code cell in your notebook now appears below the three lines\nof output with the file locations.\n\n![](https://i.imgur.com/OQBax9n.png)\n\nType the two lines of code below into your second code cell. Then, once\nyou’re done, either click on the blue play button, or hit **\\[Shift\\] +\n\\[Enter\\]**.\n\nYour code should return the output above, which corresponds to the first\nfive rows of the table in **train.csv**. It’s very important that you\nsee this output **in your notebook** before proceeding with the\ntutorial! \\> *If your code does not produce this output*, double-check\nthat your code is identical to the two lines above. And, make sure your\ncursor is in the code cell before hitting **\\[Shift\\] + \\[Enter\\]**.\n\nThe code that you’ve just written is in the Python programming language.\nIt uses a Python “module” called **pandas** (abbreviated as `pd`) to\nload the table from the **train.csv** file into the notebook. To do\nthis, we needed to plug in the location of the file (which we saw was\n`/kaggle/input/titanic/train.csv`).  \n\\> If you’re not already familiar with Python (and pandas), the code\nshouldn’t make sense to you – but don’t worry! The point of this\ntutorial is to (quickly!) make your first submission to the competition.\nAt the end of the tutorial, we suggest resources to continue your\nlearning.\n\nAt this point, you should have at least three code cells in your\nnotebook.  \n![](https://i.imgur.com/ReLhYca.png)\n\nCopy the code below into the third code cell of your notebook to load\nthe contents of the **test.csv** file. Don’t forget to click on the play\nbutton (or hit **\\[Shift\\] + \\[Enter\\]**)!\n\nAs before, make sure that you see the output above in your notebook\nbefore continuing.\n\nOnce all of the code runs successfully, all of the data (in\n**train.csv** and **test.csv**) is loaded in the notebook. (*The code\nabove shows only the first 5 rows of each table, but all of the data is\nthere – all 891 rows of **train.csv** and all 418 rows of\n**test.csv**!*)\n\n## Part 3: Your first submission\n\nRemember our goal: we want to find patterns in **train.csv** that help\nus predict whether the passengers in **test.csv** survived.\n\nIt might initially feel overwhelming to look for patterns, when there’s\nso much data to sort through. So, we’ll start simple.\n\n### Explore a pattern\n\nRemember that the sample submission file in **gender_submission.csv**\nassumes that all female passengers survived (and all male passengers\ndied).\n\nIs this a reasonable first guess? We’ll check if this pattern holds true\nin the data (in **train.csv**).\n\nCopy the code below into a new code cell. Then, run the cell.\n\n------------------------------------------------------------------------\n\n여성의 생존률을 구하는 코드입니다, 이전에 accuracy를 구하던 테크닉을\n활용하면 아래의 코드도 가능합니다\n\n------------------------------------------------------------------------\n\nBefore moving on, make sure that your code returns the output above. The\ncode above calculates the percentage of female passengers (in\n**train.csv**) who survived.\n\nThen, run the code below in another code cell:\n\nThe code above calculates the percentage of male passengers (in\n**train.csv**) who survived.\n\nFrom this you can see that almost 75% of the women on board survived,\nwhereas only 19% of the men lived to tell about it. Since gender seems\nto be such a strong indicator of survival, the submission file in\n**gender_submission.csv** is not a bad first guess!\n\nBut at the end of the day, this gender-based submission bases its\npredictions on only a single column. As you can imagine, by considering\nmultiple columns, we can discover more complex patterns that can\npotentially yield better-informed predictions. Since it is quite\ndifficult to consider several columns at once (or, it would take a long\ntime to consider all possible patterns in many different columns\nsimultaneously), we’ll use machine learning to automate this for us.\n\n## Your first machine learning model\n\nWe’ll build what’s known as a **random forest model**. This model is\nconstructed of several “trees” (there are three trees in the picture\nbelow, but we’ll construct 100!) that will individually consider each\npassenger’s data and vote on whether the individual survived. Then, the\nrandom forest model makes a democratic decision: the outcome with the\nmost votes wins!\n\n![](https://i.imgur.com/AC9Bq63.png)\n\nThe code cell below looks for patterns in four different columns\n(**“Pclass”**, **“Sex”**, **“SibSp”**, and **“Parch”**) of the data. It\nconstructs the trees in the random forest model based on patterns in the\n**train.csv** file, before generating predictions for the passengers in\n**test.csv**. The code also saves these new predictions in a CSV file\n**submission.csv**.\n\nCopy this code into your notebook, and run it in a new code cell.\n\nMake sure that your notebook outputs the same message above\n(`Your submission was successfully saved!`) before moving on. \\> Again,\ndon’t worry if this code doesn’t make sense to you! For now, we’ll focus\non how to generate and submit predictions.\n\nOnce you’re ready, click on the **“Save Version”** button in the top\nright corner of your notebook. This will generate a pop-up window.  \n- Ensure that the **“Save and Run All”** option is selected, and then\nclick on the **“Save”** button. - This generates a window in the bottom\nleft corner of the notebook. After it has finished running, click on the\nnumber to the right of the **“Save Version”** button. This pulls up a\nlist of versions on the right of the screen. Click on the ellipsis\n**(…)** to the right of the most recent version, and select **Open in\nViewer**.  \n- Click on the **Data** tab on the top of the screen. Then, click on the\n**“Submit”** button to submit your results.\n\n![](https://i.imgur.com/1ocaUl4.png)\n\nCongratulations for making your first submission to a Kaggle\ncompetition! Within ten minutes, you should receive a message providing\nyour spot on the leaderboard. Great work!\n\n## Part 4: Learn more!\n\nIf you’re interested in learning more, we strongly suggest our (3-hour)\n**[Intro to Machine\nLearning](https://www.kaggle.com/learn/intro-to-machine-learning)**\ncourse, which will help you fully understand all of the code that we’ve\npresented here. You’ll also know enough to generate even better\npredictions!\n\n# 3. Alexis Cook의 분석을 이어받아 약간변형\n\n## A. Alexis Cook의 분석은 train에서 얼마나 잘 맞출까?\n\n`-` 원래코드\n\n`-` 이렇게 수정하면 될 듯\n\n## B. Alexis Cook의 코드를 수정해보자!\n\n`-` 코드를 수정해보자.\n\n-   내가 만든게 더 좋은데??\n\n`-` 이것도 제출결과로 만들어보자.\n\n`-` 아래와 같이 제출하면 에러가 발생\n\n`-` 아래와 같이 제출파일을 저장해야 한다.\n\n# 4. 제출결과의 비교\n\n`-` 교훈: 모의고사(train)를 잘 푼다고 꼭 수능(test)을 잘보는 건 아니다.\n","srcMarkdownNoYaml":"\n\n# 1. 강의영상\n\n<https://youtu.be/playlist?list=PLQqh36zP38-yR3MqhN9-OgAtewojoYoKD&si=U1GTMdGiWFvlppYH>\n\n# 2. Alexis Cook의 분석\n\nLogging into Kaggle for the first time can be daunting. Our competitions\noften have large cash prizes, public leaderboards, and involve complex\ndata. Nevertheless, we really think all data scientists can rapidly\nlearn from machine learning competitions and meaningfully contribute to\nour community. To give you a clear understanding of how our platform\nworks and a mental model of the type of learning you could do on Kaggle,\nwe’ve created a Getting Started tutorial for the Titanic competition. It\nwalks you through the initial steps required to get your first decent\nsubmission on the leaderboard. By the end of the tutorial, you’ll also\nhave a solid understanding of how to use Kaggle’s online coding\nenvironment, where you’ll have trained your own machine learning model.\n\nSo if this is your first time entering a Kaggle competition, regardless\nof whether you: - have experience with handling large datasets, -\nhaven’t done much coding, - are newer to data science, or - are\nrelatively experienced (but are just unfamiliar with Kaggle’s platform),\n\nyou’re in the right place!\n\n## Part 1: Get started\n\nIn this section, you’ll learn more about the competition and make your\nfirst submission.\n\n### Join the competition!\n\nThe first thing to do is to join the competition! Open a new window with\n**[the competition page](https://www.kaggle.com/c/titanic)**, and click\non the **“Join Competition”** button, if you haven’t already. (*If you\nsee a “Submit Predictions” button instead of a “Join Competition”\nbutton, you have already joined the competition, and don’t need to do so\nagain.*)\n\n![](https://i.imgur.com/07cskyU.png)\n\nThis takes you to the rules acceptance page. You must accept the\ncompetition rules in order to participate. These rules govern how many\nsubmissions you can make per day, the maximum team size, and other\ncompetition-specific details. Then, click on **“I Understand and\nAccept”** to indicate that you will abide by the competition rules.\n\n### The challenge\n\nThe competition is simple: we want you to use the Titanic passenger data\n(name, age, price of ticket, etc) to try to predict who will survive and\nwho will die.\n\n### The data\n\nTo take a look at the competition data, click on the\n**<a href=\"https://www.kaggle.com/c/titanic/data\" target=\"_blank\" rel=\"noopener noreferrer\"><b>Data\ntab</b></a>** at the top of the competition page. Then, scroll down to\nfind the list of files.  \nThere are three files in the data: (1) **train.csv**, (2) **test.csv**,\nand (3) **gender_submission.csv**.\n\n#### (1) train.csv\n\n**train.csv** contains the details of a subset of the passengers on\nboard (891 passengers, to be exact – where each passenger gets a\ndifferent row in the table). To investigate this data, click on the name\nof the file on the left of the screen. Once you’ve done this, you can\nview all of the data in the window.\n\n![](https://i.imgur.com/cYsdt0n.png)\n\nThe values in the second column (**“Survived”**) can be used to\ndetermine whether each passenger survived or not: - if it’s a “1”, the\npassenger survived. - if it’s a “0”, the passenger died.\n\nFor instance, the first passenger listed in **train.csv** is Mr. Owen\nHarris Braund. He was 22 years old when he died on the Titanic.\n\n#### (2) test.csv\n\nUsing the patterns you find in **train.csv**, you have to predict\nwhether the other 418 passengers on board (in **test.csv**) survived.\n\nClick on **test.csv** (on the left of the screen) to examine its\ncontents. Note that **test.csv** does not have a **“Survived”** column -\nthis information is hidden from you, and how well you do at predicting\nthese hidden values will determine how highly you score in the\ncompetition!\n\n#### (3) gender_submission.csv\n\nThe **gender_submission.csv** file is provided as an example that shows\nhow you should structure your predictions. It predicts that all female\npassengers survived, and all male passengers died. Your hypotheses\nregarding survival will probably be different, which will lead to a\ndifferent submission file. But, just like this file, your submission\nshould have: - a **“PassengerId”** column containing the IDs of each\npassenger from **test.csv**. - a **“Survived”** column (that you will\ncreate!) with a “1” for the rows where you think the passenger survived,\nand a “0” where you predict that the passenger died.\n\n## Part 2: Your coding environment\n\nIn this section, you’ll train your own machine learning model to improve\nyour predictions. *If you’ve never written code before or don’t have any\nexperience with machine learning, don’t worry! We don’t assume any prior\nexperience in this tutorial.*\n\n### The Notebook\n\nThe first thing to do is to create a Kaggle Notebook where you’ll store\nall of your code. You can use Kaggle Notebooks to getting up and running\nwith writing code quickly, and without having to install anything on\nyour computer. (*If you are interested in deep learning, we also offer\nfree GPU access!*)\n\nBegin by clicking on the\n**<a href=\"https://www.kaggle.com/c/titanic/kernels\" target=\"_blank\">Code\ntab</a>** on the competition page. Then, click on **“New Notebook”**.\n\n![](https://i.imgur.com/v2i82Xd.png)\n\nYour notebook will take a few seconds to load. In the top left corner,\nyou can see the name of your notebook – something like\n**“kernel2daed3cd79”**.\n\n![](https://i.imgur.com/64ZFT1L.png)\n\nYou can edit the name by clicking on it. Change it to something more\ndescriptive, like **“Getting Started with Titanic”**.\n\n![](https://i.imgur.com/uwyvzXq.png)\n\n### Your first lines of code\n\nWhen you start a new notebook, it has two gray boxes for storing code.\nWe refer to these gray boxes as “code cells”.\n\n![](https://i.imgur.com/q9mwkZM.png)\n\nThe first code cell already has some code in it. To run this code, put\nyour cursor in the code cell. (*If your cursor is in the right place,\nyou’ll notice a blue vertical line to the left of the gray box.*) Then,\neither hit the play button (which appears to the left of the blue line),\nor hit **\\[Shift\\] + \\[Enter\\]** on your keyboard.\n\nIf the code runs successfully, three lines of output are returned.\nBelow, you can see the same code that you just ran, along with the\noutput that you should see in your notebook.\n\nThis shows us where the competition data is stored, so that we can load\nthe files into the notebook. We’ll do that next.\n\n### Load the data\n\nThe second code cell in your notebook now appears below the three lines\nof output with the file locations.\n\n![](https://i.imgur.com/OQBax9n.png)\n\nType the two lines of code below into your second code cell. Then, once\nyou’re done, either click on the blue play button, or hit **\\[Shift\\] +\n\\[Enter\\]**.\n\nYour code should return the output above, which corresponds to the first\nfive rows of the table in **train.csv**. It’s very important that you\nsee this output **in your notebook** before proceeding with the\ntutorial! \\> *If your code does not produce this output*, double-check\nthat your code is identical to the two lines above. And, make sure your\ncursor is in the code cell before hitting **\\[Shift\\] + \\[Enter\\]**.\n\nThe code that you’ve just written is in the Python programming language.\nIt uses a Python “module” called **pandas** (abbreviated as `pd`) to\nload the table from the **train.csv** file into the notebook. To do\nthis, we needed to plug in the location of the file (which we saw was\n`/kaggle/input/titanic/train.csv`).  \n\\> If you’re not already familiar with Python (and pandas), the code\nshouldn’t make sense to you – but don’t worry! The point of this\ntutorial is to (quickly!) make your first submission to the competition.\nAt the end of the tutorial, we suggest resources to continue your\nlearning.\n\nAt this point, you should have at least three code cells in your\nnotebook.  \n![](https://i.imgur.com/ReLhYca.png)\n\nCopy the code below into the third code cell of your notebook to load\nthe contents of the **test.csv** file. Don’t forget to click on the play\nbutton (or hit **\\[Shift\\] + \\[Enter\\]**)!\n\nAs before, make sure that you see the output above in your notebook\nbefore continuing.\n\nOnce all of the code runs successfully, all of the data (in\n**train.csv** and **test.csv**) is loaded in the notebook. (*The code\nabove shows only the first 5 rows of each table, but all of the data is\nthere – all 891 rows of **train.csv** and all 418 rows of\n**test.csv**!*)\n\n## Part 3: Your first submission\n\nRemember our goal: we want to find patterns in **train.csv** that help\nus predict whether the passengers in **test.csv** survived.\n\nIt might initially feel overwhelming to look for patterns, when there’s\nso much data to sort through. So, we’ll start simple.\n\n### Explore a pattern\n\nRemember that the sample submission file in **gender_submission.csv**\nassumes that all female passengers survived (and all male passengers\ndied).\n\nIs this a reasonable first guess? We’ll check if this pattern holds true\nin the data (in **train.csv**).\n\nCopy the code below into a new code cell. Then, run the cell.\n\n------------------------------------------------------------------------\n\n여성의 생존률을 구하는 코드입니다, 이전에 accuracy를 구하던 테크닉을\n활용하면 아래의 코드도 가능합니다\n\n------------------------------------------------------------------------\n\nBefore moving on, make sure that your code returns the output above. The\ncode above calculates the percentage of female passengers (in\n**train.csv**) who survived.\n\nThen, run the code below in another code cell:\n\nThe code above calculates the percentage of male passengers (in\n**train.csv**) who survived.\n\nFrom this you can see that almost 75% of the women on board survived,\nwhereas only 19% of the men lived to tell about it. Since gender seems\nto be such a strong indicator of survival, the submission file in\n**gender_submission.csv** is not a bad first guess!\n\nBut at the end of the day, this gender-based submission bases its\npredictions on only a single column. As you can imagine, by considering\nmultiple columns, we can discover more complex patterns that can\npotentially yield better-informed predictions. Since it is quite\ndifficult to consider several columns at once (or, it would take a long\ntime to consider all possible patterns in many different columns\nsimultaneously), we’ll use machine learning to automate this for us.\n\n## Your first machine learning model\n\nWe’ll build what’s known as a **random forest model**. This model is\nconstructed of several “trees” (there are three trees in the picture\nbelow, but we’ll construct 100!) that will individually consider each\npassenger’s data and vote on whether the individual survived. Then, the\nrandom forest model makes a democratic decision: the outcome with the\nmost votes wins!\n\n![](https://i.imgur.com/AC9Bq63.png)\n\nThe code cell below looks for patterns in four different columns\n(**“Pclass”**, **“Sex”**, **“SibSp”**, and **“Parch”**) of the data. It\nconstructs the trees in the random forest model based on patterns in the\n**train.csv** file, before generating predictions for the passengers in\n**test.csv**. The code also saves these new predictions in a CSV file\n**submission.csv**.\n\nCopy this code into your notebook, and run it in a new code cell.\n\nMake sure that your notebook outputs the same message above\n(`Your submission was successfully saved!`) before moving on. \\> Again,\ndon’t worry if this code doesn’t make sense to you! For now, we’ll focus\non how to generate and submit predictions.\n\nOnce you’re ready, click on the **“Save Version”** button in the top\nright corner of your notebook. This will generate a pop-up window.  \n- Ensure that the **“Save and Run All”** option is selected, and then\nclick on the **“Save”** button. - This generates a window in the bottom\nleft corner of the notebook. After it has finished running, click on the\nnumber to the right of the **“Save Version”** button. This pulls up a\nlist of versions on the right of the screen. Click on the ellipsis\n**(…)** to the right of the most recent version, and select **Open in\nViewer**.  \n- Click on the **Data** tab on the top of the screen. Then, click on the\n**“Submit”** button to submit your results.\n\n![](https://i.imgur.com/1ocaUl4.png)\n\nCongratulations for making your first submission to a Kaggle\ncompetition! Within ten minutes, you should receive a message providing\nyour spot on the leaderboard. Great work!\n\n## Part 4: Learn more!\n\nIf you’re interested in learning more, we strongly suggest our (3-hour)\n**[Intro to Machine\nLearning](https://www.kaggle.com/learn/intro-to-machine-learning)**\ncourse, which will help you fully understand all of the code that we’ve\npresented here. You’ll also know enough to generate even better\npredictions!\n\n# 3. Alexis Cook의 분석을 이어받아 약간변형\n\n## A. Alexis Cook의 분석은 train에서 얼마나 잘 맞출까?\n\n`-` 원래코드\n\n`-` 이렇게 수정하면 될 듯\n\n## B. Alexis Cook의 코드를 수정해보자!\n\n`-` 코드를 수정해보자.\n\n-   내가 만든게 더 좋은데??\n\n`-` 이것도 제출결과로 만들어보자.\n\n`-` 아래와 같이 제출하면 에러가 발생\n\n`-` 아래와 같이 제출파일을 저장해야 한다.\n\n# 4. 제출결과의 비교\n\n`-` 교훈: 모의고사(train)를 잘 푼다고 꼭 수능(test)을 잘보는 건 아니다.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"02wk-004-타이타닉, Alexis Cook의 코드.out.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.315","theme":"cosmo","code-copy":true,"title-block-banner":true,"title":"02wk-004: 타이타닉, Alexis Cook의 코드","author":"최규빈","date":"09/12/2023"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}