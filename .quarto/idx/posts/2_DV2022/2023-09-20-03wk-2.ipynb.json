{"title":"03wk-2: Pandas","markdown":{"yaml":{"title":"03wk-2: Pandas"},"headingText":"1. 강의영상","containsRefs":false,"markdown":"\n\n\n\n\n최규빈  \n2023-09-20\n\n<a href=\"https://colab.research.google.com/github/guebin/DV2023/blob/main/posts/03wk-1.ipynb\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" style=\"text-align: left\"></a>\n\n\n\n\n# 2. Imports\n\n# 3. Pandas: 행과 열의 선택\n\n`-` 두 가지 형태의 데이터프레임\n\n## A. 열의 선택\n\n`-` 방법1: `df.?` + str\n\n::: {.callout-note}\n## 방법1 (df.?)\n\nclass의 instance 느낌으로 df를 하나의 오브젝트라고 보면, 안에있는 어트리뷰터 중 하나로 접근하는 느낌.\n:::\n\n`-` 방법2: `df[?]` + str, \\[str,str\\]\n\n::: {.callout-note}\n## 방법2 (df.?)\n\ndictionary에서 value를 뽑으려면 key로 접근하듯이~ (기원은 딕셔너리)\n\n**DataFrame은 dictionary에서 플러스 알파느낌**\n:::\n\n- dataframe은 dictionary에서 플러스 알파느낌이라는 것을 기억하자.\n\n`-` df.X는 변수명에 `_` 언더바가 있으면 안된다.\n\n`-` 방법3: `df.iloc[:,?]` + int, int:int, \\[int,int\\], \\[bool,bool\\],\nrange\n\n::: {.callout-note}\n\ndf.iloc이 통째로 numpy array이다\n:::\n\n`-` <font color='blue'>방법4: `df.loc[:,?]` + str, ‘str:str’, \\[str,str\\], \\[bool,bool\\]</font>\n\n> 컨셉: 편해보이는 건 다 가져다 쓰겠다.\n\n- row이름이 숫자로 되어있어서 가능한 거임. (인덱싱의 편의상 숫자가 좋음)\n\n## B. 행의 선택\n\n`-` 방법1: `df[]` + int:int, str:str, \\[bool,bool\\],\npd.Series(\\[bool,bool\\]) – $(\\star\\star\\star\\star\\star)$\n\n`-` 방법2: `df.iloc[]`, `df.iloc[,:]` + int, int:int, \\[int,int\\],\n\\[bool,bool\\], range\n\n명시적으로 쓴다면 `df.iloc[,:]` 지만 생략해도 같은 코드이긴 함.\n\n`-` 방법3: `df.loc[]`, `df.loc[,:]` + int, str, int:int, str:str,\n\\[int,int\\], \\[str,str\\], \\[bool,bool\\], pd.Series(\\[bool,bool\\])\n\n**차이점** (끝점의 포함여부)\n\n## D. 제 스타일\n\n`-` **가장 안전한 코드**\n\n`-` 상황1: 하나의 col을 뽑으려 할때 좋은 코드\n\n- `df.X1`이 왜 좋냐면 변수가 많을 때 .찍고 탭누르면 뜨는 변수이름들 중에 고르면 되기 때문에 매우 편리함.\n\n`-` 상황2: row 슬라이싱을 할때 좋은 코드 $(\\star\\star\\star)$\n\n`-` 상황3: 조건에 맞는 row를 뽑을때 좋은 코드\n\n`-` 상황4: 하나의 row를 뽑으려 할때 좋은 코드\n\n`-` 상황5: (row,col)을 뽑으려 할때 좋은 코드\n\n***위의 상황이외에는 `df.loc[:,:]`를 사용하는것이 유리하다***\n\n`-` 상황6: column 슬라이싱을 할때\n\n`-` 상황7: row + column 슬라이싱을 하는 가장 좋은 코드\n\n`-` 상황8: 조건에 맞는 col을 뽑기에 가장 좋은 코드\n\n`-` 상황9: 조건에 맞는 row, col을 뽑기에 가장 좋은 코드\n\n## D. 제 스타일 X\n\n`-` 제가 안쓰는 코드1\n\n이러면 내 입장에서는 마치 아래가 동작할 것 같잖아..\n\n`-` 제가 안쓰는 코드2: bool의 list를 사용할때 iloc은 가급적 쓰지마세요\n\n이러면 마치 아래도 동작할 것 같잖아..\n\n## E. 요약\n\n`-` 알아두면 좋은 규칙\n\n-   `.iloc[]` 와 `.iloc[,:]`는 완전히 동등하다.\n-   `.loc[]` 와 `.loc[,:]`는 완전히 동등하다.\n-   결과를 `pd.Series` 형태가 아닌 `pd.DataFrame` 형태로 얻고 싶다면\n    `[[?]]`를 사용하면 된다.\n\n`-` 정리\n\n### ROW\n\n|     type of indexer      | `.` | `[]` | `.iloc` |  `.loc`  |        내가 쓴다면?         |\n|:--------------------------:|:-----:|:------:|:---------:|:----------:|:---------:|\n|           int            |  X  |  X   |    O    | $\\Delta$ |       `df.iloc[3,:]`        |\n|         int:int          |  X  |  O   |    O    | $\\Delta$ |          `df[3:5]`          |\n|       \\[int,int\\]        |  X  |  X   |    O    | $\\Delta$ |      `df.iloc[idx,:]`       |\n|           str            |  X  |  X   |    X    |    O     |     `ts.loc['time1',:]`     |\n|         str:str          |  X  |  O   |    X    |    O     | `ts.loc['time1':'time2',:]` |\n|       \\[str,str\\]        |  X  |  X   |    X    |    O     |           안할 듯           |\n|      \\[bool,bool\\]       |  X  |  O   |    O    |    O     |     `df[filtered_idx]`      |\n| pd.Series(\\[bool,bool\\]) |  X  |  O   |    X    |    O     |       `df[df.X1>20]`        |\n\n### COL\n\n| type of indexer | target | `.` | `[]` | `.iloc` | `.loc` |       내가 쓴다면?       |\n|:----------------------:|:-------:|:----:|:-----:|:-------:|:--------:|:-------:|\n|       int       |  col   |  X  |  X   |    O    |   X    |      `df.iloc[:,0]`      |\n|     int:int     |  col   |  X  |  X   |    O    |   X    |     `df.iloc[:,0:2]`     |\n|   \\[int,int\\]   |  col   |  X  |  X   |    O    |   X    |     `df.iloc[:,idx]`     |\n|       str       |  col   |  O  |  O   |    X    |   O    |     `df.loc[:,'X1']`     |\n|     str:str     |  col   |  X  |  X   |    X    |   O    |  `df.loc[:,'X1':'X4']`   |\n|   \\[str,str\\]   |  col   |  X  |  O   |    X    |   O    | `df.loc[:,colname_list]` |\n|  \\[bool,bool\\]  |  col   |  X  |  X   |    O    |   O    |  `df.loc[:,bool_list]`   |\n\n# 4. Pandas: query\n\n## A. 기본 query\n\n`-` 예시1: `A>0 and B<0`\n\n`-` 예시2: `A<B<C`\n\n`-` 예시3: `(A+B/2) > 0`\n\n`-` 예시4: `(A+B/2) > 0` and `E=='A'`\n\n## B. 외부변수를 이용\n\n`-` 예시\n\n## C. Index로 query\n\n`-` 예시\n\n# 5. Pandas: 할당\n\n`-` 자료\n\n## A. `df.assign()`\n\n`-` 방법1: assign을 이용한 추가\n\n> 이 방법은 df를 일시적으로 변화시킴\n\n## B. `df.eval()`\n\n`-` 방법2: eval을 이용한 추가\n\n> 이 방법은 df를 일시적으로 변화시킴\n\n## C. `df[colname] = xxx`\n\n`-` 방법3: `df['total']` 을 이용한 할당\n\n> 이 방법은 df를 **영구적** 으로 변화시킴\n\n# 6. HW\n\n`-` 문제: 아래의 자료에서 입학년도를 추가하고 싶다면?\n","srcMarkdownNoYaml":"\n\n\n\n\n최규빈  \n2023-09-20\n\n<a href=\"https://colab.research.google.com/github/guebin/DV2023/blob/main/posts/03wk-1.ipynb\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" style=\"text-align: left\"></a>\n\n# 1. 강의영상\n\n\n\n# 2. Imports\n\n# 3. Pandas: 행과 열의 선택\n\n`-` 두 가지 형태의 데이터프레임\n\n## A. 열의 선택\n\n`-` 방법1: `df.?` + str\n\n::: {.callout-note}\n## 방법1 (df.?)\n\nclass의 instance 느낌으로 df를 하나의 오브젝트라고 보면, 안에있는 어트리뷰터 중 하나로 접근하는 느낌.\n:::\n\n`-` 방법2: `df[?]` + str, \\[str,str\\]\n\n::: {.callout-note}\n## 방법2 (df.?)\n\ndictionary에서 value를 뽑으려면 key로 접근하듯이~ (기원은 딕셔너리)\n\n**DataFrame은 dictionary에서 플러스 알파느낌**\n:::\n\n- dataframe은 dictionary에서 플러스 알파느낌이라는 것을 기억하자.\n\n`-` df.X는 변수명에 `_` 언더바가 있으면 안된다.\n\n`-` 방법3: `df.iloc[:,?]` + int, int:int, \\[int,int\\], \\[bool,bool\\],\nrange\n\n::: {.callout-note}\n\ndf.iloc이 통째로 numpy array이다\n:::\n\n`-` <font color='blue'>방법4: `df.loc[:,?]` + str, ‘str:str’, \\[str,str\\], \\[bool,bool\\]</font>\n\n> 컨셉: 편해보이는 건 다 가져다 쓰겠다.\n\n- row이름이 숫자로 되어있어서 가능한 거임. (인덱싱의 편의상 숫자가 좋음)\n\n## B. 행의 선택\n\n`-` 방법1: `df[]` + int:int, str:str, \\[bool,bool\\],\npd.Series(\\[bool,bool\\]) – $(\\star\\star\\star\\star\\star)$\n\n`-` 방법2: `df.iloc[]`, `df.iloc[,:]` + int, int:int, \\[int,int\\],\n\\[bool,bool\\], range\n\n명시적으로 쓴다면 `df.iloc[,:]` 지만 생략해도 같은 코드이긴 함.\n\n`-` 방법3: `df.loc[]`, `df.loc[,:]` + int, str, int:int, str:str,\n\\[int,int\\], \\[str,str\\], \\[bool,bool\\], pd.Series(\\[bool,bool\\])\n\n**차이점** (끝점의 포함여부)\n\n## D. 제 스타일\n\n`-` **가장 안전한 코드**\n\n`-` 상황1: 하나의 col을 뽑으려 할때 좋은 코드\n\n- `df.X1`이 왜 좋냐면 변수가 많을 때 .찍고 탭누르면 뜨는 변수이름들 중에 고르면 되기 때문에 매우 편리함.\n\n`-` 상황2: row 슬라이싱을 할때 좋은 코드 $(\\star\\star\\star)$\n\n`-` 상황3: 조건에 맞는 row를 뽑을때 좋은 코드\n\n`-` 상황4: 하나의 row를 뽑으려 할때 좋은 코드\n\n`-` 상황5: (row,col)을 뽑으려 할때 좋은 코드\n\n***위의 상황이외에는 `df.loc[:,:]`를 사용하는것이 유리하다***\n\n`-` 상황6: column 슬라이싱을 할때\n\n`-` 상황7: row + column 슬라이싱을 하는 가장 좋은 코드\n\n`-` 상황8: 조건에 맞는 col을 뽑기에 가장 좋은 코드\n\n`-` 상황9: 조건에 맞는 row, col을 뽑기에 가장 좋은 코드\n\n## D. 제 스타일 X\n\n`-` 제가 안쓰는 코드1\n\n이러면 내 입장에서는 마치 아래가 동작할 것 같잖아..\n\n`-` 제가 안쓰는 코드2: bool의 list를 사용할때 iloc은 가급적 쓰지마세요\n\n이러면 마치 아래도 동작할 것 같잖아..\n\n## E. 요약\n\n`-` 알아두면 좋은 규칙\n\n-   `.iloc[]` 와 `.iloc[,:]`는 완전히 동등하다.\n-   `.loc[]` 와 `.loc[,:]`는 완전히 동등하다.\n-   결과를 `pd.Series` 형태가 아닌 `pd.DataFrame` 형태로 얻고 싶다면\n    `[[?]]`를 사용하면 된다.\n\n`-` 정리\n\n### ROW\n\n|     type of indexer      | `.` | `[]` | `.iloc` |  `.loc`  |        내가 쓴다면?         |\n|:--------------------------:|:-----:|:------:|:---------:|:----------:|:---------:|\n|           int            |  X  |  X   |    O    | $\\Delta$ |       `df.iloc[3,:]`        |\n|         int:int          |  X  |  O   |    O    | $\\Delta$ |          `df[3:5]`          |\n|       \\[int,int\\]        |  X  |  X   |    O    | $\\Delta$ |      `df.iloc[idx,:]`       |\n|           str            |  X  |  X   |    X    |    O     |     `ts.loc['time1',:]`     |\n|         str:str          |  X  |  O   |    X    |    O     | `ts.loc['time1':'time2',:]` |\n|       \\[str,str\\]        |  X  |  X   |    X    |    O     |           안할 듯           |\n|      \\[bool,bool\\]       |  X  |  O   |    O    |    O     |     `df[filtered_idx]`      |\n| pd.Series(\\[bool,bool\\]) |  X  |  O   |    X    |    O     |       `df[df.X1>20]`        |\n\n### COL\n\n| type of indexer | target | `.` | `[]` | `.iloc` | `.loc` |       내가 쓴다면?       |\n|:----------------------:|:-------:|:----:|:-----:|:-------:|:--------:|:-------:|\n|       int       |  col   |  X  |  X   |    O    |   X    |      `df.iloc[:,0]`      |\n|     int:int     |  col   |  X  |  X   |    O    |   X    |     `df.iloc[:,0:2]`     |\n|   \\[int,int\\]   |  col   |  X  |  X   |    O    |   X    |     `df.iloc[:,idx]`     |\n|       str       |  col   |  O  |  O   |    X    |   O    |     `df.loc[:,'X1']`     |\n|     str:str     |  col   |  X  |  X   |    X    |   O    |  `df.loc[:,'X1':'X4']`   |\n|   \\[str,str\\]   |  col   |  X  |  O   |    X    |   O    | `df.loc[:,colname_list]` |\n|  \\[bool,bool\\]  |  col   |  X  |  X   |    O    |   O    |  `df.loc[:,bool_list]`   |\n\n# 4. Pandas: query\n\n## A. 기본 query\n\n`-` 예시1: `A>0 and B<0`\n\n`-` 예시2: `A<B<C`\n\n`-` 예시3: `(A+B/2) > 0`\n\n`-` 예시4: `(A+B/2) > 0` and `E=='A'`\n\n## B. 외부변수를 이용\n\n`-` 예시\n\n## C. Index로 query\n\n`-` 예시\n\n# 5. Pandas: 할당\n\n`-` 자료\n\n## A. `df.assign()`\n\n`-` 방법1: assign을 이용한 추가\n\n> 이 방법은 df를 일시적으로 변화시킴\n\n## B. `df.eval()`\n\n`-` 방법2: eval을 이용한 추가\n\n> 이 방법은 df를 일시적으로 변화시킴\n\n## C. `df[colname] = xxx`\n\n`-` 방법3: `df['total']` 을 이용한 할당\n\n> 이 방법은 df를 **영구적** 으로 변화시킴\n\n# 6. HW\n\n`-` 문제: 아래의 자료에서 입학년도를 추가하고 싶다면?\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"2023-09-20-03wk-2.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.315","theme":"cosmo","code-copy":true,"title-block-banner":true,"title":"03wk-2: Pandas"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}