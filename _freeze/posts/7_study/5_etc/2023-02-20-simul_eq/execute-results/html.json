{
  "hash": "8d55d15dccfbb3f4455b80fb2049c7e5",
  "result": {
    "markdown": "---\ntitle: \"simultaneous equation\"\ndescription: 'implementation with R'\nauthor: 'jiyun Lim'\ndate: '02/19/2023'\ncategories:\n  - R\n  - linear algebra\n  - basic\nformat:\n  html:\n    theme: default\n---\n\n\n## 행렬과 연립일차 방정식\n\n파이썬에서 Numpy는 행렬 계산을 쉽게하기 위해 사용하는 패키지이다. R로도 행렬과 매트릭스를 구현해보자.\n\n`-` 예를 들어 아래와 같은 문제가 있다고 하자.\n\n$$\\begin{cases}w+2x+ey+4z = 1 \\\\2w+2x+y=9 \\\\x-y = 4 \\\\3w+x-y+3y=7\\end{cases}$$\n\n`-` 매트릭스 형태로 위의 식을 표현하면 아래와 같다.\n\n$$\n\\begin{bmatrix}\n1 & 2 & 3 & 4 \\\\ \n2 & 2 & 1 & 0 \\\\\n0 & 1 &-1 & 0 \\\\\n3 & 1 &-1 & 3 \n\\end{bmatrix}\n\\begin{bmatrix}\nw \\\\ x \\\\ y \\\\z \n\\end{bmatrix}=\\begin{bmatrix}\n1 \\\\ 9 \\\\ 4 \\\\7 \n\\end{bmatrix}\n$$\n\n`-` 양변에\n\n$$\\begin{bmatrix}\n1 & 2 & 3 & 4 \\\\ \n2 & 2 & 1 & 0 \\\\\n0 & 1 &-1 & 0 \\\\\n3 & 1 &-1 & 3 \n\\end{bmatrix}$$\n\n의 역행렬을 취하면\n\n$$\\begin{bmatrix}\nw \\\\ x \\\\ y \\\\z \n\\end{bmatrix}=\\begin{bmatrix}\n1 & 2 & 3 & 4 \\\\ \n2 & 2 & 1 & 0 \\\\\n0 & 1 &-1 & 0 \\\\\n3 & 1 &-1 & 3 \n\\end{bmatrix}^{-1}\\begin{bmatrix}\n1 \\\\ 9 \\\\ 4 \\\\7 \n\\end{bmatrix}$$\n\n## R로 구현\n\n### `-` 방법1\n\n\n::: {.cell}\n\n```{.r .cell-code}\nA=rbind(c(1,2,3,4),c(2,2,1,0),c(0,1,-1,0),c(3,1,-1,3))\nA\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3] [,4]\n[1,]    1    2    3    4\n[2,]    2    2    1    0\n[3,]    0    1   -1    0\n[4,]    3    1   -1    3\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nb=c(1,9,4,7)\ndim(b)=c(4,1)\nb\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1]\n[1,]    1\n[2,]    9\n[3,]    4\n[4,]    7\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsolve(A) %*% b \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1]\n[1,]    2\n[2,]    3\n[3,]   -1\n[4,]   -1\n```\n\n\n:::\n:::\n\n\n따라서 $(w,x,y,z) = (2,3,-1,-1)$ 이다.\n\n### `-` 방법2\n\n\n::: {.cell}\n\n```{.r .cell-code}\nA = rbind(c(1,2,3,4),c(2,2,1,0),c(0,1,-1,0),c(3,1,-1,3))\nA\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3] [,4]\n[1,]    1    2    3    4\n[2,]    2    2    1    0\n[3,]    0    1   -1    0\n[4,]    3    1   -1    3\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nb = c(1,9,4,7)\nb\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 9 4 7\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsolve(A) %*% b\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1]\n[1,]    2\n[2,]    3\n[3,]   -1\n[4,]   -1\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}